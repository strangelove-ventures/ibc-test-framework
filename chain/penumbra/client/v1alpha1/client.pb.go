// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/client/v1alpha1/client.proto

package clientv1alpha1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	crypto "github.com/cometbft/cometbft/proto/tendermint/crypto"
	p2p "github.com/cometbft/cometbft/proto/tendermint/p2p"
	types1 "github.com/cometbft/cometbft/proto/tendermint/types"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types2 "github.com/cosmos/gogoproto/types"
	types "github.com/cosmos/ibc-go/v8/modules/core/23-commitment/types"
	v1alpha1 "github.com/strangelove-ventures/interchaintest/v8/chain/penumbra/core/chain/v1alpha1"
	v1alpha12 "github.com/strangelove-ventures/interchaintest/v8/chain/penumbra/core/crypto/v1alpha1"
	v1alpha13 "github.com/strangelove-ventures/interchaintest/v8/chain/penumbra/core/dex/v1alpha1"
	v1alpha11 "github.com/strangelove-ventures/interchaintest/v8/chain/penumbra/core/stake/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Requests information about the chain state as known by the node.
type InfoRequest struct {
	// The Tendermint software semantic version.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The Tendermint block protocol version.
	BlockVersion uint64 `protobuf:"varint,2,opt,name=block_version,json=blockVersion,proto3" json:"block_version,omitempty"`
	// The Tendermint p2p protocol version.
	P2PVersion uint64 `protobuf:"varint,3,opt,name=p2p_version,json=p2pVersion,proto3" json:"p2p_version,omitempty"`
	/// The ABCI spec semantic version.
	AbciVersion string `protobuf:"bytes,4,opt,name=abci_version,json=abciVersion,proto3" json:"abci_version,omitempty"`
}

func (m *InfoRequest) Reset()         { *m = InfoRequest{} }
func (m *InfoRequest) String() string { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()    {}
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{0}
}
func (m *InfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoRequest.Merge(m, src)
}
func (m *InfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *InfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InfoRequest proto.InternalMessageInfo

func (m *InfoRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *InfoRequest) GetBlockVersion() uint64 {
	if m != nil {
		return m.BlockVersion
	}
	return 0
}

func (m *InfoRequest) GetP2PVersion() uint64 {
	if m != nil {
		return m.P2PVersion
	}
	return 0
}

func (m *InfoRequest) GetAbciVersion() string {
	if m != nil {
		return m.AbciVersion
	}
	return ""
}

// Contains information about the chain state as known by the node.
type InfoResponse struct {
	// Some arbitrary information.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The application software semantic version.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The application protocol version.
	AppVersion uint64 `protobuf:"varint,3,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// The latest block for which the app has called [`Commit`](super::super::Request::Commit).
	LastBlockHeight uint64 `protobuf:"varint,4,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
	// The latest result of [`Commit`](super::super::Request::Commit).
	LastBlockAppHash []byte `protobuf:"bytes,5,opt,name=last_block_app_hash,json=lastBlockAppHash,proto3" json:"last_block_app_hash,omitempty"`
}

func (m *InfoResponse) Reset()         { *m = InfoResponse{} }
func (m *InfoResponse) String() string { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()    {}
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{1}
}
func (m *InfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResponse.Merge(m, src)
}
func (m *InfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *InfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResponse proto.InternalMessageInfo

func (m *InfoResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *InfoResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *InfoResponse) GetAppVersion() uint64 {
	if m != nil {
		return m.AppVersion
	}
	return 0
}

func (m *InfoResponse) GetLastBlockHeight() uint64 {
	if m != nil {
		return m.LastBlockHeight
	}
	return 0
}

func (m *InfoResponse) GetLastBlockAppHash() []byte {
	if m != nil {
		return m.LastBlockAppHash
	}
	return nil
}

// Requests a range of compact block data.
type CompactBlockRangeRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The start height of the range.
	StartHeight uint64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// The end height of the range, defaults to the latest block height.
	EndHeight uint64 `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	// If set, keeps the connection alive past `end_height`,
	// streaming new compact blocks as they are created.
	KeepAlive bool `protobuf:"varint,4,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
}

func (m *CompactBlockRangeRequest) Reset()         { *m = CompactBlockRangeRequest{} }
func (m *CompactBlockRangeRequest) String() string { return proto.CompactTextString(m) }
func (*CompactBlockRangeRequest) ProtoMessage()    {}
func (*CompactBlockRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{2}
}
func (m *CompactBlockRangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactBlockRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactBlockRangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactBlockRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactBlockRangeRequest.Merge(m, src)
}
func (m *CompactBlockRangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompactBlockRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactBlockRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompactBlockRangeRequest proto.InternalMessageInfo

func (m *CompactBlockRangeRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *CompactBlockRangeRequest) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *CompactBlockRangeRequest) GetEndHeight() uint64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

func (m *CompactBlockRangeRequest) GetKeepAlive() bool {
	if m != nil {
		return m.KeepAlive
	}
	return false
}

type CompactBlockRangeResponse struct {
	CompactBlock *v1alpha1.CompactBlock `protobuf:"bytes,1,opt,name=compact_block,json=compactBlock,proto3" json:"compact_block,omitempty"`
}

func (m *CompactBlockRangeResponse) Reset()         { *m = CompactBlockRangeResponse{} }
func (m *CompactBlockRangeResponse) String() string { return proto.CompactTextString(m) }
func (*CompactBlockRangeResponse) ProtoMessage()    {}
func (*CompactBlockRangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{3}
}
func (m *CompactBlockRangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactBlockRangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactBlockRangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactBlockRangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactBlockRangeResponse.Merge(m, src)
}
func (m *CompactBlockRangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *CompactBlockRangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactBlockRangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CompactBlockRangeResponse proto.InternalMessageInfo

func (m *CompactBlockRangeResponse) GetCompactBlock() *v1alpha1.CompactBlock {
	if m != nil {
		return m.CompactBlock
	}
	return nil
}

// Requests the global configuration data for the chain.
type ChainParametersRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *ChainParametersRequest) Reset()         { *m = ChainParametersRequest{} }
func (m *ChainParametersRequest) String() string { return proto.CompactTextString(m) }
func (*ChainParametersRequest) ProtoMessage()    {}
func (*ChainParametersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{4}
}
func (m *ChainParametersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainParametersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainParametersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainParametersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainParametersRequest.Merge(m, src)
}
func (m *ChainParametersRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChainParametersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainParametersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainParametersRequest proto.InternalMessageInfo

func (m *ChainParametersRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type EpochByHeightRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *EpochByHeightRequest) Reset()         { *m = EpochByHeightRequest{} }
func (m *EpochByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*EpochByHeightRequest) ProtoMessage()    {}
func (*EpochByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{5}
}
func (m *EpochByHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochByHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochByHeightRequest.Merge(m, src)
}
func (m *EpochByHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *EpochByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EpochByHeightRequest proto.InternalMessageInfo

func (m *EpochByHeightRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type EpochByHeightResponse struct {
	Epoch *v1alpha1.Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *EpochByHeightResponse) Reset()         { *m = EpochByHeightResponse{} }
func (m *EpochByHeightResponse) String() string { return proto.CompactTextString(m) }
func (*EpochByHeightResponse) ProtoMessage()    {}
func (*EpochByHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{6}
}
func (m *EpochByHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochByHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochByHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochByHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochByHeightResponse.Merge(m, src)
}
func (m *EpochByHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *EpochByHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochByHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EpochByHeightResponse proto.InternalMessageInfo

func (m *EpochByHeightResponse) GetEpoch() *v1alpha1.Epoch {
	if m != nil {
		return m.Epoch
	}
	return nil
}

type ChainParametersResponse struct {
	ChainParameters *v1alpha1.ChainParameters `protobuf:"bytes,1,opt,name=chain_parameters,json=chainParameters,proto3" json:"chain_parameters,omitempty"`
}

func (m *ChainParametersResponse) Reset()         { *m = ChainParametersResponse{} }
func (m *ChainParametersResponse) String() string { return proto.CompactTextString(m) }
func (*ChainParametersResponse) ProtoMessage()    {}
func (*ChainParametersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{7}
}
func (m *ChainParametersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainParametersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainParametersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainParametersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainParametersResponse.Merge(m, src)
}
func (m *ChainParametersResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChainParametersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainParametersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChainParametersResponse proto.InternalMessageInfo

func (m *ChainParametersResponse) GetChainParameters() *v1alpha1.ChainParameters {
	if m != nil {
		return m.ChainParameters
	}
	return nil
}

// Requests information on the chain's validators.
type ValidatorInfoRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Whether or not to return inactive validators
	ShowInactive bool `protobuf:"varint,2,opt,name=show_inactive,json=showInactive,proto3" json:"show_inactive,omitempty"`
}

func (m *ValidatorInfoRequest) Reset()         { *m = ValidatorInfoRequest{} }
func (m *ValidatorInfoRequest) String() string { return proto.CompactTextString(m) }
func (*ValidatorInfoRequest) ProtoMessage()    {}
func (*ValidatorInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{8}
}
func (m *ValidatorInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorInfoRequest.Merge(m, src)
}
func (m *ValidatorInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorInfoRequest proto.InternalMessageInfo

func (m *ValidatorInfoRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ValidatorInfoRequest) GetShowInactive() bool {
	if m != nil {
		return m.ShowInactive
	}
	return false
}

type ValidatorInfoResponse struct {
	ValidatorInfo *v1alpha11.ValidatorInfo `protobuf:"bytes,1,opt,name=validator_info,json=validatorInfo,proto3" json:"validator_info,omitempty"`
}

func (m *ValidatorInfoResponse) Reset()         { *m = ValidatorInfoResponse{} }
func (m *ValidatorInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ValidatorInfoResponse) ProtoMessage()    {}
func (*ValidatorInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{9}
}
func (m *ValidatorInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorInfoResponse.Merge(m, src)
}
func (m *ValidatorInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorInfoResponse proto.InternalMessageInfo

func (m *ValidatorInfoResponse) GetValidatorInfo() *v1alpha11.ValidatorInfo {
	if m != nil {
		return m.ValidatorInfo
	}
	return nil
}

type TransactionByNoteRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId        string                     `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	NoteCommitment *v1alpha12.StateCommitment `protobuf:"bytes,2,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
}

func (m *TransactionByNoteRequest) Reset()         { *m = TransactionByNoteRequest{} }
func (m *TransactionByNoteRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionByNoteRequest) ProtoMessage()    {}
func (*TransactionByNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{10}
}
func (m *TransactionByNoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionByNoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionByNoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionByNoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionByNoteRequest.Merge(m, src)
}
func (m *TransactionByNoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionByNoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionByNoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionByNoteRequest proto.InternalMessageInfo

func (m *TransactionByNoteRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *TransactionByNoteRequest) GetNoteCommitment() *v1alpha12.StateCommitment {
	if m != nil {
		return m.NoteCommitment
	}
	return nil
}

type TransactionByNoteResponse struct {
	NoteSource *v1alpha1.NoteSource `protobuf:"bytes,1,opt,name=note_source,json=noteSource,proto3" json:"note_source,omitempty"`
}

func (m *TransactionByNoteResponse) Reset()         { *m = TransactionByNoteResponse{} }
func (m *TransactionByNoteResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionByNoteResponse) ProtoMessage()    {}
func (*TransactionByNoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{11}
}
func (m *TransactionByNoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionByNoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionByNoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionByNoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionByNoteResponse.Merge(m, src)
}
func (m *TransactionByNoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionByNoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionByNoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionByNoteResponse proto.InternalMessageInfo

func (m *TransactionByNoteResponse) GetNoteSource() *v1alpha1.NoteSource {
	if m != nil {
		return m.NoteSource
	}
	return nil
}

type ValidatorStatusRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId     string                 `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	IdentityKey *v1alpha12.IdentityKey `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (m *ValidatorStatusRequest) Reset()         { *m = ValidatorStatusRequest{} }
func (m *ValidatorStatusRequest) String() string { return proto.CompactTextString(m) }
func (*ValidatorStatusRequest) ProtoMessage()    {}
func (*ValidatorStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{12}
}
func (m *ValidatorStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorStatusRequest.Merge(m, src)
}
func (m *ValidatorStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorStatusRequest proto.InternalMessageInfo

func (m *ValidatorStatusRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ValidatorStatusRequest) GetIdentityKey() *v1alpha12.IdentityKey {
	if m != nil {
		return m.IdentityKey
	}
	return nil
}

type ValidatorStatusResponse struct {
	Status *v1alpha11.ValidatorStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *ValidatorStatusResponse) Reset()         { *m = ValidatorStatusResponse{} }
func (m *ValidatorStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ValidatorStatusResponse) ProtoMessage()    {}
func (*ValidatorStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{13}
}
func (m *ValidatorStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorStatusResponse.Merge(m, src)
}
func (m *ValidatorStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorStatusResponse proto.InternalMessageInfo

func (m *ValidatorStatusResponse) GetStatus() *v1alpha11.ValidatorStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Requests the compounded penalty for a validator over a range of epochs.
type ValidatorPenaltyRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId         string                 `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	IdentityKey     *v1alpha12.IdentityKey `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	StartEpochIndex uint64                 `protobuf:"varint,3,opt,name=start_epoch_index,json=startEpochIndex,proto3" json:"start_epoch_index,omitempty"`
	EndEpochIndex   uint64                 `protobuf:"varint,4,opt,name=end_epoch_index,json=endEpochIndex,proto3" json:"end_epoch_index,omitempty"`
}

func (m *ValidatorPenaltyRequest) Reset()         { *m = ValidatorPenaltyRequest{} }
func (m *ValidatorPenaltyRequest) String() string { return proto.CompactTextString(m) }
func (*ValidatorPenaltyRequest) ProtoMessage()    {}
func (*ValidatorPenaltyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{14}
}
func (m *ValidatorPenaltyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorPenaltyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorPenaltyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorPenaltyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorPenaltyRequest.Merge(m, src)
}
func (m *ValidatorPenaltyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorPenaltyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorPenaltyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorPenaltyRequest proto.InternalMessageInfo

func (m *ValidatorPenaltyRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ValidatorPenaltyRequest) GetIdentityKey() *v1alpha12.IdentityKey {
	if m != nil {
		return m.IdentityKey
	}
	return nil
}

func (m *ValidatorPenaltyRequest) GetStartEpochIndex() uint64 {
	if m != nil {
		return m.StartEpochIndex
	}
	return 0
}

func (m *ValidatorPenaltyRequest) GetEndEpochIndex() uint64 {
	if m != nil {
		return m.EndEpochIndex
	}
	return 0
}

type ValidatorPenaltyResponse struct {
	Penalty *v1alpha11.Penalty `protobuf:"bytes,1,opt,name=penalty,proto3" json:"penalty,omitempty"`
}

func (m *ValidatorPenaltyResponse) Reset()         { *m = ValidatorPenaltyResponse{} }
func (m *ValidatorPenaltyResponse) String() string { return proto.CompactTextString(m) }
func (*ValidatorPenaltyResponse) ProtoMessage()    {}
func (*ValidatorPenaltyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{15}
}
func (m *ValidatorPenaltyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorPenaltyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorPenaltyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorPenaltyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorPenaltyResponse.Merge(m, src)
}
func (m *ValidatorPenaltyResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorPenaltyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorPenaltyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorPenaltyResponse proto.InternalMessageInfo

func (m *ValidatorPenaltyResponse) GetPenalty() *v1alpha11.Penalty {
	if m != nil {
		return m.Penalty
	}
	return nil
}

type CurrentValidatorRateRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId     string                 `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	IdentityKey *v1alpha12.IdentityKey `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (m *CurrentValidatorRateRequest) Reset()         { *m = CurrentValidatorRateRequest{} }
func (m *CurrentValidatorRateRequest) String() string { return proto.CompactTextString(m) }
func (*CurrentValidatorRateRequest) ProtoMessage()    {}
func (*CurrentValidatorRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{16}
}
func (m *CurrentValidatorRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentValidatorRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentValidatorRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentValidatorRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentValidatorRateRequest.Merge(m, src)
}
func (m *CurrentValidatorRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CurrentValidatorRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentValidatorRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentValidatorRateRequest proto.InternalMessageInfo

func (m *CurrentValidatorRateRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *CurrentValidatorRateRequest) GetIdentityKey() *v1alpha12.IdentityKey {
	if m != nil {
		return m.IdentityKey
	}
	return nil
}

type CurrentValidatorRateResponse struct {
	Data *v1alpha11.RateData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CurrentValidatorRateResponse) Reset()         { *m = CurrentValidatorRateResponse{} }
func (m *CurrentValidatorRateResponse) String() string { return proto.CompactTextString(m) }
func (*CurrentValidatorRateResponse) ProtoMessage()    {}
func (*CurrentValidatorRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{17}
}
func (m *CurrentValidatorRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentValidatorRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentValidatorRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentValidatorRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentValidatorRateResponse.Merge(m, src)
}
func (m *CurrentValidatorRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *CurrentValidatorRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentValidatorRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentValidatorRateResponse proto.InternalMessageInfo

func (m *CurrentValidatorRateResponse) GetData() *v1alpha11.RateData {
	if m != nil {
		return m.Data
	}
	return nil
}

type NextValidatorRateRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId     string                 `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	IdentityKey *v1alpha12.IdentityKey `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (m *NextValidatorRateRequest) Reset()         { *m = NextValidatorRateRequest{} }
func (m *NextValidatorRateRequest) String() string { return proto.CompactTextString(m) }
func (*NextValidatorRateRequest) ProtoMessage()    {}
func (*NextValidatorRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{18}
}
func (m *NextValidatorRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextValidatorRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextValidatorRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextValidatorRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextValidatorRateRequest.Merge(m, src)
}
func (m *NextValidatorRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *NextValidatorRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NextValidatorRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NextValidatorRateRequest proto.InternalMessageInfo

func (m *NextValidatorRateRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *NextValidatorRateRequest) GetIdentityKey() *v1alpha12.IdentityKey {
	if m != nil {
		return m.IdentityKey
	}
	return nil
}

type NextValidatorRateResponse struct {
	Data *v1alpha11.RateData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *NextValidatorRateResponse) Reset()         { *m = NextValidatorRateResponse{} }
func (m *NextValidatorRateResponse) String() string { return proto.CompactTextString(m) }
func (*NextValidatorRateResponse) ProtoMessage()    {}
func (*NextValidatorRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{19}
}
func (m *NextValidatorRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextValidatorRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextValidatorRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextValidatorRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextValidatorRateResponse.Merge(m, src)
}
func (m *NextValidatorRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *NextValidatorRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NextValidatorRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NextValidatorRateResponse proto.InternalMessageInfo

func (m *NextValidatorRateResponse) GetData() *v1alpha11.RateData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Requests batch swap data associated with a given height and trading pair from the view service.
type BatchSwapOutputDataRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId     string                 `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Height      uint64                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	TradingPair *v1alpha13.TradingPair `protobuf:"bytes,3,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (m *BatchSwapOutputDataRequest) Reset()         { *m = BatchSwapOutputDataRequest{} }
func (m *BatchSwapOutputDataRequest) String() string { return proto.CompactTextString(m) }
func (*BatchSwapOutputDataRequest) ProtoMessage()    {}
func (*BatchSwapOutputDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{20}
}
func (m *BatchSwapOutputDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchSwapOutputDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchSwapOutputDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchSwapOutputDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchSwapOutputDataRequest.Merge(m, src)
}
func (m *BatchSwapOutputDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchSwapOutputDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchSwapOutputDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchSwapOutputDataRequest proto.InternalMessageInfo

func (m *BatchSwapOutputDataRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *BatchSwapOutputDataRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BatchSwapOutputDataRequest) GetTradingPair() *v1alpha13.TradingPair {
	if m != nil {
		return m.TradingPair
	}
	return nil
}

type BatchSwapOutputDataResponse struct {
	Data *v1alpha13.BatchSwapOutputData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BatchSwapOutputDataResponse) Reset()         { *m = BatchSwapOutputDataResponse{} }
func (m *BatchSwapOutputDataResponse) String() string { return proto.CompactTextString(m) }
func (*BatchSwapOutputDataResponse) ProtoMessage()    {}
func (*BatchSwapOutputDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{21}
}
func (m *BatchSwapOutputDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchSwapOutputDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchSwapOutputDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchSwapOutputDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchSwapOutputDataResponse.Merge(m, src)
}
func (m *BatchSwapOutputDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchSwapOutputDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchSwapOutputDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchSwapOutputDataResponse proto.InternalMessageInfo

func (m *BatchSwapOutputDataResponse) GetData() *v1alpha13.BatchSwapOutputData {
	if m != nil {
		return m.Data
	}
	return nil
}

type SwapExecutionRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId     string                         `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Height      uint64                         `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	TradingPair *v1alpha13.DirectedTradingPair `protobuf:"bytes,3,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (m *SwapExecutionRequest) Reset()         { *m = SwapExecutionRequest{} }
func (m *SwapExecutionRequest) String() string { return proto.CompactTextString(m) }
func (*SwapExecutionRequest) ProtoMessage()    {}
func (*SwapExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{22}
}
func (m *SwapExecutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapExecutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapExecutionRequest.Merge(m, src)
}
func (m *SwapExecutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SwapExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SwapExecutionRequest proto.InternalMessageInfo

func (m *SwapExecutionRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *SwapExecutionRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *SwapExecutionRequest) GetTradingPair() *v1alpha13.DirectedTradingPair {
	if m != nil {
		return m.TradingPair
	}
	return nil
}

type SwapExecutionResponse struct {
	SwapExecution *v1alpha13.SwapExecution `protobuf:"bytes,1,opt,name=swap_execution,json=swapExecution,proto3" json:"swap_execution,omitempty"`
}

func (m *SwapExecutionResponse) Reset()         { *m = SwapExecutionResponse{} }
func (m *SwapExecutionResponse) String() string { return proto.CompactTextString(m) }
func (*SwapExecutionResponse) ProtoMessage()    {}
func (*SwapExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{23}
}
func (m *SwapExecutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapExecutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapExecutionResponse.Merge(m, src)
}
func (m *SwapExecutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *SwapExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SwapExecutionResponse proto.InternalMessageInfo

func (m *SwapExecutionResponse) GetSwapExecution() *v1alpha13.SwapExecution {
	if m != nil {
		return m.SwapExecution
	}
	return nil
}

type ArbExecutionRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *ArbExecutionRequest) Reset()         { *m = ArbExecutionRequest{} }
func (m *ArbExecutionRequest) String() string { return proto.CompactTextString(m) }
func (*ArbExecutionRequest) ProtoMessage()    {}
func (*ArbExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{24}
}
func (m *ArbExecutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbExecutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbExecutionRequest.Merge(m, src)
}
func (m *ArbExecutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArbExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArbExecutionRequest proto.InternalMessageInfo

func (m *ArbExecutionRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ArbExecutionRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ArbExecutionResponse struct {
	SwapExecution *v1alpha13.SwapExecution `protobuf:"bytes,1,opt,name=swap_execution,json=swapExecution,proto3" json:"swap_execution,omitempty"`
	Height        uint64                   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *ArbExecutionResponse) Reset()         { *m = ArbExecutionResponse{} }
func (m *ArbExecutionResponse) String() string { return proto.CompactTextString(m) }
func (*ArbExecutionResponse) ProtoMessage()    {}
func (*ArbExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{25}
}
func (m *ArbExecutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbExecutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbExecutionResponse.Merge(m, src)
}
func (m *ArbExecutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArbExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArbExecutionResponse proto.InternalMessageInfo

func (m *ArbExecutionResponse) GetSwapExecution() *v1alpha13.SwapExecution {
	if m != nil {
		return m.SwapExecution
	}
	return nil
}

func (m *ArbExecutionResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type SwapExecutionsRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// If present, only return swap executions occurring after the given height.
	StartHeight uint64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// If present, only return swap executions occurring before the given height.
	EndHeight uint64 `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	// If present, filter swap executions by the given trading pair.
	TradingPair *v1alpha13.DirectedTradingPair `protobuf:"bytes,4,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (m *SwapExecutionsRequest) Reset()         { *m = SwapExecutionsRequest{} }
func (m *SwapExecutionsRequest) String() string { return proto.CompactTextString(m) }
func (*SwapExecutionsRequest) ProtoMessage()    {}
func (*SwapExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{26}
}
func (m *SwapExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapExecutionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapExecutionsRequest.Merge(m, src)
}
func (m *SwapExecutionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SwapExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SwapExecutionsRequest proto.InternalMessageInfo

func (m *SwapExecutionsRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *SwapExecutionsRequest) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *SwapExecutionsRequest) GetEndHeight() uint64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

func (m *SwapExecutionsRequest) GetTradingPair() *v1alpha13.DirectedTradingPair {
	if m != nil {
		return m.TradingPair
	}
	return nil
}

type SwapExecutionsResponse struct {
	SwapExecution *v1alpha13.SwapExecution       `protobuf:"bytes,1,opt,name=swap_execution,json=swapExecution,proto3" json:"swap_execution,omitempty"`
	Height        uint64                         `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	TradingPair   *v1alpha13.DirectedTradingPair `protobuf:"bytes,3,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (m *SwapExecutionsResponse) Reset()         { *m = SwapExecutionsResponse{} }
func (m *SwapExecutionsResponse) String() string { return proto.CompactTextString(m) }
func (*SwapExecutionsResponse) ProtoMessage()    {}
func (*SwapExecutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{27}
}
func (m *SwapExecutionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapExecutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapExecutionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapExecutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapExecutionsResponse.Merge(m, src)
}
func (m *SwapExecutionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *SwapExecutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapExecutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SwapExecutionsResponse proto.InternalMessageInfo

func (m *SwapExecutionsResponse) GetSwapExecution() *v1alpha13.SwapExecution {
	if m != nil {
		return m.SwapExecution
	}
	return nil
}

func (m *SwapExecutionsResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *SwapExecutionsResponse) GetTradingPair() *v1alpha13.DirectedTradingPair {
	if m != nil {
		return m.TradingPair
	}
	return nil
}

type ArbExecutionsRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// If present, only return arb executions occurring after the given height.
	StartHeight uint64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// If present, only return arb executions occurring before the given height.
	EndHeight uint64 `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (m *ArbExecutionsRequest) Reset()         { *m = ArbExecutionsRequest{} }
func (m *ArbExecutionsRequest) String() string { return proto.CompactTextString(m) }
func (*ArbExecutionsRequest) ProtoMessage()    {}
func (*ArbExecutionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{28}
}
func (m *ArbExecutionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbExecutionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbExecutionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbExecutionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbExecutionsRequest.Merge(m, src)
}
func (m *ArbExecutionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArbExecutionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbExecutionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArbExecutionsRequest proto.InternalMessageInfo

func (m *ArbExecutionsRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ArbExecutionsRequest) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *ArbExecutionsRequest) GetEndHeight() uint64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

type ArbExecutionsResponse struct {
	SwapExecution *v1alpha13.SwapExecution `protobuf:"bytes,1,opt,name=swap_execution,json=swapExecution,proto3" json:"swap_execution,omitempty"`
	Height        uint64                   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *ArbExecutionsResponse) Reset()         { *m = ArbExecutionsResponse{} }
func (m *ArbExecutionsResponse) String() string { return proto.CompactTextString(m) }
func (*ArbExecutionsResponse) ProtoMessage()    {}
func (*ArbExecutionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{29}
}
func (m *ArbExecutionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArbExecutionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArbExecutionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArbExecutionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArbExecutionsResponse.Merge(m, src)
}
func (m *ArbExecutionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArbExecutionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArbExecutionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArbExecutionsResponse proto.InternalMessageInfo

func (m *ArbExecutionsResponse) GetSwapExecution() *v1alpha13.SwapExecution {
	if m != nil {
		return m.SwapExecution
	}
	return nil
}

func (m *ArbExecutionsResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// Requests all liquidity position data from the view service.
type LiquidityPositionsRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// If true, include closed and withdrawn positions.
	IncludeClosed bool `protobuf:"varint,4,opt,name=include_closed,json=includeClosed,proto3" json:"include_closed,omitempty"`
}

func (m *LiquidityPositionsRequest) Reset()         { *m = LiquidityPositionsRequest{} }
func (m *LiquidityPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*LiquidityPositionsRequest) ProtoMessage()    {}
func (*LiquidityPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{30}
}
func (m *LiquidityPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPositionsRequest.Merge(m, src)
}
func (m *LiquidityPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPositionsRequest proto.InternalMessageInfo

func (m *LiquidityPositionsRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *LiquidityPositionsRequest) GetIncludeClosed() bool {
	if m != nil {
		return m.IncludeClosed
	}
	return false
}

type LiquidityPositionsResponse struct {
	Data *v1alpha13.Position `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *LiquidityPositionsResponse) Reset()         { *m = LiquidityPositionsResponse{} }
func (m *LiquidityPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*LiquidityPositionsResponse) ProtoMessage()    {}
func (*LiquidityPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{31}
}
func (m *LiquidityPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPositionsResponse.Merge(m, src)
}
func (m *LiquidityPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPositionsResponse proto.InternalMessageInfo

func (m *LiquidityPositionsResponse) GetData() *v1alpha13.Position {
	if m != nil {
		return m.Data
	}
	return nil
}

// Requests liquidity positions for ordered by effective price.
type LiquidityPositionsByPriceRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The directed trading pair to request positions for
	TradingPair *v1alpha13.DirectedTradingPair `protobuf:"bytes,2,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	// The maximum number of positions to return.
	Limit uint64 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *LiquidityPositionsByPriceRequest) Reset()         { *m = LiquidityPositionsByPriceRequest{} }
func (m *LiquidityPositionsByPriceRequest) String() string { return proto.CompactTextString(m) }
func (*LiquidityPositionsByPriceRequest) ProtoMessage()    {}
func (*LiquidityPositionsByPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{32}
}
func (m *LiquidityPositionsByPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPositionsByPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPositionsByPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPositionsByPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPositionsByPriceRequest.Merge(m, src)
}
func (m *LiquidityPositionsByPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPositionsByPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPositionsByPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPositionsByPriceRequest proto.InternalMessageInfo

func (m *LiquidityPositionsByPriceRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *LiquidityPositionsByPriceRequest) GetTradingPair() *v1alpha13.DirectedTradingPair {
	if m != nil {
		return m.TradingPair
	}
	return nil
}

func (m *LiquidityPositionsByPriceRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type LiquidityPositionsByPriceResponse struct {
	Data *v1alpha13.Position `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *LiquidityPositionsByPriceResponse) Reset()         { *m = LiquidityPositionsByPriceResponse{} }
func (m *LiquidityPositionsByPriceResponse) String() string { return proto.CompactTextString(m) }
func (*LiquidityPositionsByPriceResponse) ProtoMessage()    {}
func (*LiquidityPositionsByPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{33}
}
func (m *LiquidityPositionsByPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPositionsByPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPositionsByPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPositionsByPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPositionsByPriceResponse.Merge(m, src)
}
func (m *LiquidityPositionsByPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPositionsByPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPositionsByPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPositionsByPriceResponse proto.InternalMessageInfo

func (m *LiquidityPositionsByPriceResponse) GetData() *v1alpha13.Position {
	if m != nil {
		return m.Data
	}
	return nil
}

// Requests specific liquidity position data from the view service.
type LiquidityPositionByIdRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId    string                `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	PositionId *v1alpha13.PositionId `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *LiquidityPositionByIdRequest) Reset()         { *m = LiquidityPositionByIdRequest{} }
func (m *LiquidityPositionByIdRequest) String() string { return proto.CompactTextString(m) }
func (*LiquidityPositionByIdRequest) ProtoMessage()    {}
func (*LiquidityPositionByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{34}
}
func (m *LiquidityPositionByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPositionByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPositionByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPositionByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPositionByIdRequest.Merge(m, src)
}
func (m *LiquidityPositionByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPositionByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPositionByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPositionByIdRequest proto.InternalMessageInfo

func (m *LiquidityPositionByIdRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *LiquidityPositionByIdRequest) GetPositionId() *v1alpha13.PositionId {
	if m != nil {
		return m.PositionId
	}
	return nil
}

type LiquidityPositionByIdResponse struct {
	Data *v1alpha13.Position `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *LiquidityPositionByIdResponse) Reset()         { *m = LiquidityPositionByIdResponse{} }
func (m *LiquidityPositionByIdResponse) String() string { return proto.CompactTextString(m) }
func (*LiquidityPositionByIdResponse) ProtoMessage()    {}
func (*LiquidityPositionByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{35}
}
func (m *LiquidityPositionByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPositionByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPositionByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPositionByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPositionByIdResponse.Merge(m, src)
}
func (m *LiquidityPositionByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPositionByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPositionByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPositionByIdResponse proto.InternalMessageInfo

func (m *LiquidityPositionByIdResponse) GetData() *v1alpha13.Position {
	if m != nil {
		return m.Data
	}
	return nil
}

type LiquidityPositionsByIdRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId    string                  `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	PositionId []*v1alpha13.PositionId `protobuf:"bytes,2,rep,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *LiquidityPositionsByIdRequest) Reset()         { *m = LiquidityPositionsByIdRequest{} }
func (m *LiquidityPositionsByIdRequest) String() string { return proto.CompactTextString(m) }
func (*LiquidityPositionsByIdRequest) ProtoMessage()    {}
func (*LiquidityPositionsByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{36}
}
func (m *LiquidityPositionsByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPositionsByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPositionsByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPositionsByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPositionsByIdRequest.Merge(m, src)
}
func (m *LiquidityPositionsByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPositionsByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPositionsByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPositionsByIdRequest proto.InternalMessageInfo

func (m *LiquidityPositionsByIdRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *LiquidityPositionsByIdRequest) GetPositionId() []*v1alpha13.PositionId {
	if m != nil {
		return m.PositionId
	}
	return nil
}

type LiquidityPositionsByIdResponse struct {
	Data *v1alpha13.Position `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *LiquidityPositionsByIdResponse) Reset()         { *m = LiquidityPositionsByIdResponse{} }
func (m *LiquidityPositionsByIdResponse) String() string { return proto.CompactTextString(m) }
func (*LiquidityPositionsByIdResponse) ProtoMessage()    {}
func (*LiquidityPositionsByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{37}
}
func (m *LiquidityPositionsByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPositionsByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPositionsByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPositionsByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPositionsByIdResponse.Merge(m, src)
}
func (m *LiquidityPositionsByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPositionsByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPositionsByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPositionsByIdResponse proto.InternalMessageInfo

func (m *LiquidityPositionsByIdResponse) GetData() *v1alpha13.Position {
	if m != nil {
		return m.Data
	}
	return nil
}

type SpreadRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId     string                 `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TradingPair *v1alpha13.TradingPair `protobuf:"bytes,2,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (m *SpreadRequest) Reset()         { *m = SpreadRequest{} }
func (m *SpreadRequest) String() string { return proto.CompactTextString(m) }
func (*SpreadRequest) ProtoMessage()    {}
func (*SpreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{38}
}
func (m *SpreadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpreadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpreadRequest.Merge(m, src)
}
func (m *SpreadRequest) XXX_Size() int {
	return m.Size()
}
func (m *SpreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SpreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SpreadRequest proto.InternalMessageInfo

func (m *SpreadRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *SpreadRequest) GetTradingPair() *v1alpha13.TradingPair {
	if m != nil {
		return m.TradingPair
	}
	return nil
}

type SpreadResponse struct {
	// The best position when trading 1 => 2.
	Best_1To_2Position *v1alpha13.Position `protobuf:"bytes,1,opt,name=best_1_to_2_position,json=best1To2Position,proto3" json:"best_1_to_2_position,omitempty"`
	// The best position when trading 2 => 1.
	Best_2To_1Position *v1alpha13.Position `protobuf:"bytes,2,opt,name=best_2_to_1_position,json=best2To1Position,proto3" json:"best_2_to_1_position,omitempty"`
	// An approximation of the effective price when trading 1 => 2.
	ApproxEffectivePrice_1To_2 float64 `protobuf:"fixed64,3,opt,name=approx_effective_price_1_to_2,json=approxEffectivePrice1To2,proto3" json:"approx_effective_price_1_to_2,omitempty"`
	// An approximation of the effective price when trading 2 => 1.
	ApproxEffectivePrice_2To_1 float64 `protobuf:"fixed64,4,opt,name=approx_effective_price_2_to_1,json=approxEffectivePrice2To1,proto3" json:"approx_effective_price_2_to_1,omitempty"`
}

func (m *SpreadResponse) Reset()         { *m = SpreadResponse{} }
func (m *SpreadResponse) String() string { return proto.CompactTextString(m) }
func (*SpreadResponse) ProtoMessage()    {}
func (*SpreadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{39}
}
func (m *SpreadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpreadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpreadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpreadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpreadResponse.Merge(m, src)
}
func (m *SpreadResponse) XXX_Size() int {
	return m.Size()
}
func (m *SpreadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpreadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpreadResponse proto.InternalMessageInfo

func (m *SpreadResponse) GetBest_1To_2Position() *v1alpha13.Position {
	if m != nil {
		return m.Best_1To_2Position
	}
	return nil
}

func (m *SpreadResponse) GetBest_2To_1Position() *v1alpha13.Position {
	if m != nil {
		return m.Best_2To_1Position
	}
	return nil
}

func (m *SpreadResponse) GetApproxEffectivePrice_1To_2() float64 {
	if m != nil {
		return m.ApproxEffectivePrice_1To_2
	}
	return 0
}

func (m *SpreadResponse) GetApproxEffectivePrice_2To_1() float64 {
	if m != nil {
		return m.ApproxEffectivePrice_2To_1
	}
	return 0
}

// Requests information on an asset by asset id
type DenomMetadataByIdRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The asset id to request information on.
	AssetId *v1alpha12.AssetId `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *DenomMetadataByIdRequest) Reset()         { *m = DenomMetadataByIdRequest{} }
func (m *DenomMetadataByIdRequest) String() string { return proto.CompactTextString(m) }
func (*DenomMetadataByIdRequest) ProtoMessage()    {}
func (*DenomMetadataByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{40}
}
func (m *DenomMetadataByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomMetadataByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomMetadataByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomMetadataByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomMetadataByIdRequest.Merge(m, src)
}
func (m *DenomMetadataByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *DenomMetadataByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomMetadataByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DenomMetadataByIdRequest proto.InternalMessageInfo

func (m *DenomMetadataByIdRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *DenomMetadataByIdRequest) GetAssetId() *v1alpha12.AssetId {
	if m != nil {
		return m.AssetId
	}
	return nil
}

type DenomMetadataByIdResponse struct {
	// If present, information on the requested asset.
	//
	// If the requested asset was unknown, this field will not be present.
	DenomMetadata *v1alpha12.DenomMetadata `protobuf:"bytes,1,opt,name=denom_metadata,json=denomMetadata,proto3" json:"denom_metadata,omitempty"`
}

func (m *DenomMetadataByIdResponse) Reset()         { *m = DenomMetadataByIdResponse{} }
func (m *DenomMetadataByIdResponse) String() string { return proto.CompactTextString(m) }
func (*DenomMetadataByIdResponse) ProtoMessage()    {}
func (*DenomMetadataByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{41}
}
func (m *DenomMetadataByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomMetadataByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomMetadataByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomMetadataByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomMetadataByIdResponse.Merge(m, src)
}
func (m *DenomMetadataByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *DenomMetadataByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomMetadataByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DenomMetadataByIdResponse proto.InternalMessageInfo

func (m *DenomMetadataByIdResponse) GetDenomMetadata() *v1alpha12.DenomMetadata {
	if m != nil {
		return m.DenomMetadata
	}
	return nil
}

type ProposalInfoRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The proposal id to request information on.
	ProposalId uint64 `protobuf:"varint,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *ProposalInfoRequest) Reset()         { *m = ProposalInfoRequest{} }
func (m *ProposalInfoRequest) String() string { return proto.CompactTextString(m) }
func (*ProposalInfoRequest) ProtoMessage()    {}
func (*ProposalInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{42}
}
func (m *ProposalInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalInfoRequest.Merge(m, src)
}
func (m *ProposalInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProposalInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalInfoRequest proto.InternalMessageInfo

func (m *ProposalInfoRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ProposalInfoRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

type ProposalInfoResponse struct {
	// The block height at which the proposal started voting.
	StartBlockHeight uint64 `protobuf:"varint,1,opt,name=start_block_height,json=startBlockHeight,proto3" json:"start_block_height,omitempty"`
	// The position of the state commitment tree at which the proposal is considered to have started voting.
	StartPosition uint64 `protobuf:"varint,2,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
}

func (m *ProposalInfoResponse) Reset()         { *m = ProposalInfoResponse{} }
func (m *ProposalInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ProposalInfoResponse) ProtoMessage()    {}
func (*ProposalInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{43}
}
func (m *ProposalInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalInfoResponse.Merge(m, src)
}
func (m *ProposalInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProposalInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalInfoResponse proto.InternalMessageInfo

func (m *ProposalInfoResponse) GetStartBlockHeight() uint64 {
	if m != nil {
		return m.StartBlockHeight
	}
	return 0
}

func (m *ProposalInfoResponse) GetStartPosition() uint64 {
	if m != nil {
		return m.StartPosition
	}
	return 0
}

// Requests the validator rate data for a proposal.
type ProposalRateDataRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The proposal id to request information on.
	ProposalId uint64 `protobuf:"varint,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *ProposalRateDataRequest) Reset()         { *m = ProposalRateDataRequest{} }
func (m *ProposalRateDataRequest) String() string { return proto.CompactTextString(m) }
func (*ProposalRateDataRequest) ProtoMessage()    {}
func (*ProposalRateDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{44}
}
func (m *ProposalRateDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalRateDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalRateDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalRateDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalRateDataRequest.Merge(m, src)
}
func (m *ProposalRateDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProposalRateDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalRateDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalRateDataRequest proto.InternalMessageInfo

func (m *ProposalRateDataRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ProposalRateDataRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

// The rate data for a single validator.
type ProposalRateDataResponse struct {
	RateData *v1alpha11.RateData `protobuf:"bytes,1,opt,name=rate_data,json=rateData,proto3" json:"rate_data,omitempty"`
}

func (m *ProposalRateDataResponse) Reset()         { *m = ProposalRateDataResponse{} }
func (m *ProposalRateDataResponse) String() string { return proto.CompactTextString(m) }
func (*ProposalRateDataResponse) ProtoMessage()    {}
func (*ProposalRateDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{45}
}
func (m *ProposalRateDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalRateDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalRateDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalRateDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalRateDataResponse.Merge(m, src)
}
func (m *ProposalRateDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProposalRateDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalRateDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalRateDataResponse proto.InternalMessageInfo

func (m *ProposalRateDataResponse) GetRateData() *v1alpha11.RateData {
	if m != nil {
		return m.RateData
	}
	return nil
}

type SimulateTradeRequest struct {
	Input   *v1alpha12.Value              `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Output  *v1alpha12.AssetId            `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Routing *SimulateTradeRequest_Routing `protobuf:"bytes,3,opt,name=routing,proto3" json:"routing,omitempty"`
}

func (m *SimulateTradeRequest) Reset()         { *m = SimulateTradeRequest{} }
func (m *SimulateTradeRequest) String() string { return proto.CompactTextString(m) }
func (*SimulateTradeRequest) ProtoMessage()    {}
func (*SimulateTradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{46}
}
func (m *SimulateTradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulateTradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulateTradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulateTradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulateTradeRequest.Merge(m, src)
}
func (m *SimulateTradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SimulateTradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulateTradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimulateTradeRequest proto.InternalMessageInfo

func (m *SimulateTradeRequest) GetInput() *v1alpha12.Value {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *SimulateTradeRequest) GetOutput() *v1alpha12.AssetId {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *SimulateTradeRequest) GetRouting() *SimulateTradeRequest_Routing {
	if m != nil {
		return m.Routing
	}
	return nil
}

type SimulateTradeRequest_Routing struct {
	// Types that are valid to be assigned to Setting:
	//
	//	*SimulateTradeRequest_Routing_Default_
	//	*SimulateTradeRequest_Routing_SingleHop_
	Setting isSimulateTradeRequest_Routing_Setting `protobuf_oneof:"setting"`
}

func (m *SimulateTradeRequest_Routing) Reset()         { *m = SimulateTradeRequest_Routing{} }
func (m *SimulateTradeRequest_Routing) String() string { return proto.CompactTextString(m) }
func (*SimulateTradeRequest_Routing) ProtoMessage()    {}
func (*SimulateTradeRequest_Routing) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{46, 0}
}
func (m *SimulateTradeRequest_Routing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulateTradeRequest_Routing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulateTradeRequest_Routing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulateTradeRequest_Routing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulateTradeRequest_Routing.Merge(m, src)
}
func (m *SimulateTradeRequest_Routing) XXX_Size() int {
	return m.Size()
}
func (m *SimulateTradeRequest_Routing) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulateTradeRequest_Routing.DiscardUnknown(m)
}

var xxx_messageInfo_SimulateTradeRequest_Routing proto.InternalMessageInfo

type isSimulateTradeRequest_Routing_Setting interface {
	isSimulateTradeRequest_Routing_Setting()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SimulateTradeRequest_Routing_Default_ struct {
	Default *SimulateTradeRequest_Routing_Default `protobuf:"bytes,1,opt,name=default,proto3,oneof" json:"default,omitempty"`
}
type SimulateTradeRequest_Routing_SingleHop_ struct {
	SingleHop *SimulateTradeRequest_Routing_SingleHop `protobuf:"bytes,2,opt,name=single_hop,json=singleHop,proto3,oneof" json:"single_hop,omitempty"`
}

func (*SimulateTradeRequest_Routing_Default_) isSimulateTradeRequest_Routing_Setting()   {}
func (*SimulateTradeRequest_Routing_SingleHop_) isSimulateTradeRequest_Routing_Setting() {}

func (m *SimulateTradeRequest_Routing) GetSetting() isSimulateTradeRequest_Routing_Setting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *SimulateTradeRequest_Routing) GetDefault() *SimulateTradeRequest_Routing_Default {
	if x, ok := m.GetSetting().(*SimulateTradeRequest_Routing_Default_); ok {
		return x.Default
	}
	return nil
}

func (m *SimulateTradeRequest_Routing) GetSingleHop() *SimulateTradeRequest_Routing_SingleHop {
	if x, ok := m.GetSetting().(*SimulateTradeRequest_Routing_SingleHop_); ok {
		return x.SingleHop
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SimulateTradeRequest_Routing) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SimulateTradeRequest_Routing_Default_)(nil),
		(*SimulateTradeRequest_Routing_SingleHop_)(nil),
	}
}

type SimulateTradeRequest_Routing_SingleHop struct {
}

func (m *SimulateTradeRequest_Routing_SingleHop) Reset() {
	*m = SimulateTradeRequest_Routing_SingleHop{}
}
func (m *SimulateTradeRequest_Routing_SingleHop) String() string { return proto.CompactTextString(m) }
func (*SimulateTradeRequest_Routing_SingleHop) ProtoMessage()    {}
func (*SimulateTradeRequest_Routing_SingleHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{46, 0, 0}
}
func (m *SimulateTradeRequest_Routing_SingleHop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulateTradeRequest_Routing_SingleHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulateTradeRequest_Routing_SingleHop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulateTradeRequest_Routing_SingleHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulateTradeRequest_Routing_SingleHop.Merge(m, src)
}
func (m *SimulateTradeRequest_Routing_SingleHop) XXX_Size() int {
	return m.Size()
}
func (m *SimulateTradeRequest_Routing_SingleHop) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulateTradeRequest_Routing_SingleHop.DiscardUnknown(m)
}

var xxx_messageInfo_SimulateTradeRequest_Routing_SingleHop proto.InternalMessageInfo

type SimulateTradeRequest_Routing_Default struct {
}

func (m *SimulateTradeRequest_Routing_Default) Reset()         { *m = SimulateTradeRequest_Routing_Default{} }
func (m *SimulateTradeRequest_Routing_Default) String() string { return proto.CompactTextString(m) }
func (*SimulateTradeRequest_Routing_Default) ProtoMessage()    {}
func (*SimulateTradeRequest_Routing_Default) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{46, 0, 1}
}
func (m *SimulateTradeRequest_Routing_Default) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulateTradeRequest_Routing_Default) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulateTradeRequest_Routing_Default.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulateTradeRequest_Routing_Default) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulateTradeRequest_Routing_Default.Merge(m, src)
}
func (m *SimulateTradeRequest_Routing_Default) XXX_Size() int {
	return m.Size()
}
func (m *SimulateTradeRequest_Routing_Default) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulateTradeRequest_Routing_Default.DiscardUnknown(m)
}

var xxx_messageInfo_SimulateTradeRequest_Routing_Default proto.InternalMessageInfo

type SimulateTradeResponse struct {
	Output *v1alpha13.SwapExecution `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *SimulateTradeResponse) Reset()         { *m = SimulateTradeResponse{} }
func (m *SimulateTradeResponse) String() string { return proto.CompactTextString(m) }
func (*SimulateTradeResponse) ProtoMessage()    {}
func (*SimulateTradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{47}
}
func (m *SimulateTradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimulateTradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimulateTradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimulateTradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulateTradeResponse.Merge(m, src)
}
func (m *SimulateTradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SimulateTradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulateTradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimulateTradeResponse proto.InternalMessageInfo

func (m *SimulateTradeResponse) GetOutput() *v1alpha13.SwapExecution {
	if m != nil {
		return m.Output
	}
	return nil
}

// Performs a key-value query, either by key or by key hash.
//
// Proofs are only supported by key.
type KeyValueRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// If set, the key to fetch from storage.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// whether to return a proof
	Proof bool `protobuf:"varint,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *KeyValueRequest) Reset()         { *m = KeyValueRequest{} }
func (m *KeyValueRequest) String() string { return proto.CompactTextString(m) }
func (*KeyValueRequest) ProtoMessage()    {}
func (*KeyValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{48}
}
func (m *KeyValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValueRequest.Merge(m, src)
}
func (m *KeyValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeyValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValueRequest proto.InternalMessageInfo

func (m *KeyValueRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *KeyValueRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValueRequest) GetProof() bool {
	if m != nil {
		return m.Proof
	}
	return false
}

type KeyValueResponse struct {
	// The value corresponding to the specified key, if it was found.
	Value *KeyValueResponse_Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// A proof of existence or non-existence.
	Proof *types.MerkleProof `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *KeyValueResponse) Reset()         { *m = KeyValueResponse{} }
func (m *KeyValueResponse) String() string { return proto.CompactTextString(m) }
func (*KeyValueResponse) ProtoMessage()    {}
func (*KeyValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{49}
}
func (m *KeyValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValueResponse.Merge(m, src)
}
func (m *KeyValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *KeyValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValueResponse proto.InternalMessageInfo

func (m *KeyValueResponse) GetValue() *KeyValueResponse_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KeyValueResponse) GetProof() *types.MerkleProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type KeyValueResponse_Value struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KeyValueResponse_Value) Reset()         { *m = KeyValueResponse_Value{} }
func (m *KeyValueResponse_Value) String() string { return proto.CompactTextString(m) }
func (*KeyValueResponse_Value) ProtoMessage()    {}
func (*KeyValueResponse_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{49, 0}
}
func (m *KeyValueResponse_Value) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValueResponse_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValueResponse_Value.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValueResponse_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValueResponse_Value.Merge(m, src)
}
func (m *KeyValueResponse_Value) XXX_Size() int {
	return m.Size()
}
func (m *KeyValueResponse_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValueResponse_Value.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValueResponse_Value proto.InternalMessageInfo

func (m *KeyValueResponse_Value) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// Performs a prefixed key-value query, by string prefix.
type PrefixValueRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The prefix to fetch subkeys from storage.
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *PrefixValueRequest) Reset()         { *m = PrefixValueRequest{} }
func (m *PrefixValueRequest) String() string { return proto.CompactTextString(m) }
func (*PrefixValueRequest) ProtoMessage()    {}
func (*PrefixValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{50}
}
func (m *PrefixValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrefixValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrefixValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrefixValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixValueRequest.Merge(m, src)
}
func (m *PrefixValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrefixValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixValueRequest proto.InternalMessageInfo

func (m *PrefixValueRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *PrefixValueRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type PrefixValueResponse struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PrefixValueResponse) Reset()         { *m = PrefixValueResponse{} }
func (m *PrefixValueResponse) String() string { return proto.CompactTextString(m) }
func (*PrefixValueResponse) ProtoMessage()    {}
func (*PrefixValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{51}
}
func (m *PrefixValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrefixValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrefixValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrefixValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixValueResponse.Merge(m, src)
}
func (m *PrefixValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrefixValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixValueResponse proto.InternalMessageInfo

func (m *PrefixValueResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PrefixValueResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// GetTxRequest is the request type for the GetTx RPC method.
type GetTxRequest struct {
	// Hash of transaction to retrieve
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Include proofs of the transaction's inclusion in the block
	Prove bool `protobuf:"varint,2,opt,name=prove,proto3" json:"prove,omitempty"`
}

func (m *GetTxRequest) Reset()         { *m = GetTxRequest{} }
func (m *GetTxRequest) String() string { return proto.CompactTextString(m) }
func (*GetTxRequest) ProtoMessage()    {}
func (*GetTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{52}
}
func (m *GetTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxRequest.Merge(m, src)
}
func (m *GetTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxRequest proto.InternalMessageInfo

func (m *GetTxRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *GetTxRequest) GetProve() bool {
	if m != nil {
		return m.Prove
	}
	return false
}

// GetTxResponse is the response type for the GetTx RPC method.
type GetTxResponse struct {
	// Hash of transaction
	Hash     []byte    `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height   uint64    `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Index    uint64    `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	TxResult *TxResult `protobuf:"bytes,4,opt,name=tx_result,json=txResult,proto3" json:"tx_result,omitempty"`
	Tx       []byte    `protobuf:"bytes,5,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *GetTxResponse) Reset()         { *m = GetTxResponse{} }
func (m *GetTxResponse) String() string { return proto.CompactTextString(m) }
func (*GetTxResponse) ProtoMessage()    {}
func (*GetTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{53}
}
func (m *GetTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxResponse.Merge(m, src)
}
func (m *GetTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxResponse proto.InternalMessageInfo

func (m *GetTxResponse) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *GetTxResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GetTxResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GetTxResponse) GetTxResult() *TxResult {
	if m != nil {
		return m.TxResult
	}
	return nil
}

func (m *GetTxResponse) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

type TxResult struct {
	Log       string `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
	GasWanted uint64 `protobuf:"varint,2,opt,name=gas_wanted,json=gasWanted,proto3" json:"gas_wanted,omitempty"`
	GasUsed   uint64 `protobuf:"varint,3,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Tags      []*Tag `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (m *TxResult) Reset()         { *m = TxResult{} }
func (m *TxResult) String() string { return proto.CompactTextString(m) }
func (*TxResult) ProtoMessage()    {}
func (*TxResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{54}
}
func (m *TxResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxResult.Merge(m, src)
}
func (m *TxResult) XXX_Size() int {
	return m.Size()
}
func (m *TxResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TxResult.DiscardUnknown(m)
}

var xxx_messageInfo_TxResult proto.InternalMessageInfo

func (m *TxResult) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *TxResult) GetGasWanted() uint64 {
	if m != nil {
		return m.GasWanted
	}
	return 0
}

func (m *TxResult) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *TxResult) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Tag struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Index bool   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{55}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Tag) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Tag) GetIndex() bool {
	if m != nil {
		return m.Index
	}
	return false
}

// BroadcastTxAsyncRequest is the request type for the BroadcastTxAsync RPC method.
type BroadcastTxAsyncRequest struct {
	Params []byte `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	ReqId  uint64 `protobuf:"varint,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (m *BroadcastTxAsyncRequest) Reset()         { *m = BroadcastTxAsyncRequest{} }
func (m *BroadcastTxAsyncRequest) String() string { return proto.CompactTextString(m) }
func (*BroadcastTxAsyncRequest) ProtoMessage()    {}
func (*BroadcastTxAsyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{56}
}
func (m *BroadcastTxAsyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastTxAsyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastTxAsyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastTxAsyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastTxAsyncRequest.Merge(m, src)
}
func (m *BroadcastTxAsyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastTxAsyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastTxAsyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastTxAsyncRequest proto.InternalMessageInfo

func (m *BroadcastTxAsyncRequest) GetParams() []byte {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *BroadcastTxAsyncRequest) GetReqId() uint64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

// BroadcastTxAsyncResponse is the response type for the BroadcastTxAsync RPC method.
type BroadcastTxAsyncResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Log  string `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	Hash []byte `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *BroadcastTxAsyncResponse) Reset()         { *m = BroadcastTxAsyncResponse{} }
func (m *BroadcastTxAsyncResponse) String() string { return proto.CompactTextString(m) }
func (*BroadcastTxAsyncResponse) ProtoMessage()    {}
func (*BroadcastTxAsyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{57}
}
func (m *BroadcastTxAsyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastTxAsyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastTxAsyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastTxAsyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastTxAsyncResponse.Merge(m, src)
}
func (m *BroadcastTxAsyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastTxAsyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastTxAsyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastTxAsyncResponse proto.InternalMessageInfo

func (m *BroadcastTxAsyncResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BroadcastTxAsyncResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BroadcastTxAsyncResponse) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *BroadcastTxAsyncResponse) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// BroadcastTxSyncRequest is the request type for the BroadcastTxSync RPC method.
type BroadcastTxSyncRequest struct {
	Params []byte `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	ReqId  uint64 `protobuf:"varint,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (m *BroadcastTxSyncRequest) Reset()         { *m = BroadcastTxSyncRequest{} }
func (m *BroadcastTxSyncRequest) String() string { return proto.CompactTextString(m) }
func (*BroadcastTxSyncRequest) ProtoMessage()    {}
func (*BroadcastTxSyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{58}
}
func (m *BroadcastTxSyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastTxSyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastTxSyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastTxSyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastTxSyncRequest.Merge(m, src)
}
func (m *BroadcastTxSyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastTxSyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastTxSyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastTxSyncRequest proto.InternalMessageInfo

func (m *BroadcastTxSyncRequest) GetParams() []byte {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *BroadcastTxSyncRequest) GetReqId() uint64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

// BroadcastTxSyncResponse is the response type for the BroadcastTxSync RPC method.
type BroadcastTxSyncResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Log  string `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	Hash []byte `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *BroadcastTxSyncResponse) Reset()         { *m = BroadcastTxSyncResponse{} }
func (m *BroadcastTxSyncResponse) String() string { return proto.CompactTextString(m) }
func (*BroadcastTxSyncResponse) ProtoMessage()    {}
func (*BroadcastTxSyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{59}
}
func (m *BroadcastTxSyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastTxSyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastTxSyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastTxSyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastTxSyncResponse.Merge(m, src)
}
func (m *BroadcastTxSyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastTxSyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastTxSyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastTxSyncResponse proto.InternalMessageInfo

func (m *BroadcastTxSyncResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BroadcastTxSyncResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BroadcastTxSyncResponse) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *BroadcastTxSyncResponse) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// GetStatusRequest is the request type for the Query/GetStatus RPC method.
type GetStatusRequest struct {
}

func (m *GetStatusRequest) Reset()         { *m = GetStatusRequest{} }
func (m *GetStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetStatusRequest) ProtoMessage()    {}
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{60}
}
func (m *GetStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatusRequest.Merge(m, src)
}
func (m *GetStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatusRequest proto.InternalMessageInfo

// GetStatusResponse is the response type for the Query/GetStatus RPC method.
type GetStatusResponse struct {
	NodeInfo      *p2p.DefaultNodeInfo `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
	SyncInfo      *SyncInfo            `protobuf:"bytes,2,opt,name=sync_info,json=syncInfo,proto3" json:"sync_info,omitempty"`
	ValidatorInfo *types1.Validator    `protobuf:"bytes,3,opt,name=validator_info,json=validatorInfo,proto3" json:"validator_info,omitempty"`
}

func (m *GetStatusResponse) Reset()         { *m = GetStatusResponse{} }
func (m *GetStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetStatusResponse) ProtoMessage()    {}
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{61}
}
func (m *GetStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatusResponse.Merge(m, src)
}
func (m *GetStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatusResponse proto.InternalMessageInfo

func (m *GetStatusResponse) GetNodeInfo() *p2p.DefaultNodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

func (m *GetStatusResponse) GetSyncInfo() *SyncInfo {
	if m != nil {
		return m.SyncInfo
	}
	return nil
}

func (m *GetStatusResponse) GetValidatorInfo() *types1.Validator {
	if m != nil {
		return m.ValidatorInfo
	}
	return nil
}

type SyncInfo struct {
	LatestBlockHash   []byte            `protobuf:"bytes,1,opt,name=latest_block_hash,json=latestBlockHash,proto3" json:"latest_block_hash,omitempty"`
	LatestAppHash     []byte            `protobuf:"bytes,2,opt,name=latest_app_hash,json=latestAppHash,proto3" json:"latest_app_hash,omitempty"`
	LatestBlockHeight uint64            `protobuf:"varint,3,opt,name=latest_block_height,json=latestBlockHeight,proto3" json:"latest_block_height,omitempty"`
	LatestBlockTime   *types2.Timestamp `protobuf:"bytes,4,opt,name=latest_block_time,json=latestBlockTime,proto3" json:"latest_block_time,omitempty"`
	// These are implemented in tendermint, but not
	// in tendermint-rpc.
	// bytes earliest_block_hash = 5;
	// bytes earliest_app_hash = 6;
	// uint64 earliest_block_height = 7;
	// google.protobuf.Timestamp earliest_block_time = 8;
	CatchingUp bool `protobuf:"varint,9,opt,name=catching_up,json=catchingUp,proto3" json:"catching_up,omitempty"`
}

func (m *SyncInfo) Reset()         { *m = SyncInfo{} }
func (m *SyncInfo) String() string { return proto.CompactTextString(m) }
func (*SyncInfo) ProtoMessage()    {}
func (*SyncInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{62}
}
func (m *SyncInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncInfo.Merge(m, src)
}
func (m *SyncInfo) XXX_Size() int {
	return m.Size()
}
func (m *SyncInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SyncInfo proto.InternalMessageInfo

func (m *SyncInfo) GetLatestBlockHash() []byte {
	if m != nil {
		return m.LatestBlockHash
	}
	return nil
}

func (m *SyncInfo) GetLatestAppHash() []byte {
	if m != nil {
		return m.LatestAppHash
	}
	return nil
}

func (m *SyncInfo) GetLatestBlockHeight() uint64 {
	if m != nil {
		return m.LatestBlockHeight
	}
	return 0
}

func (m *SyncInfo) GetLatestBlockTime() *types2.Timestamp {
	if m != nil {
		return m.LatestBlockTime
	}
	return nil
}

func (m *SyncInfo) GetCatchingUp() bool {
	if m != nil {
		return m.CatchingUp
	}
	return false
}

// ABCIQueryRequest defines the request structure for the ABCIQuery gRPC query.
type ABCIQueryRequest struct {
	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Height int64  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Prove  bool   `protobuf:"varint,4,opt,name=prove,proto3" json:"prove,omitempty"`
}

func (m *ABCIQueryRequest) Reset()         { *m = ABCIQueryRequest{} }
func (m *ABCIQueryRequest) String() string { return proto.CompactTextString(m) }
func (*ABCIQueryRequest) ProtoMessage()    {}
func (*ABCIQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{63}
}
func (m *ABCIQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ABCIQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ABCIQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ABCIQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ABCIQueryRequest.Merge(m, src)
}
func (m *ABCIQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ABCIQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ABCIQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ABCIQueryRequest proto.InternalMessageInfo

func (m *ABCIQueryRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ABCIQueryRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ABCIQueryRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ABCIQueryRequest) GetProve() bool {
	if m != nil {
		return m.Prove
	}
	return false
}

// ABCIQueryResponse defines the response structure for the ABCIQuery gRPC query.
//
// Note: This type is a duplicate of the ResponseQuery proto type defined in
// Tendermint.
type ABCIQueryResponse struct {
	Code      uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Log       string           `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	Info      string           `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	Index     int64            `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	Key       []byte           `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte           `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	ProofOps  *crypto.ProofOps `protobuf:"bytes,8,opt,name=proof_ops,json=proofOps,proto3" json:"proof_ops,omitempty"`
	Height    int64            `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	Codespace string           `protobuf:"bytes,10,opt,name=codespace,proto3" json:"codespace,omitempty"`
}

func (m *ABCIQueryResponse) Reset()         { *m = ABCIQueryResponse{} }
func (m *ABCIQueryResponse) String() string { return proto.CompactTextString(m) }
func (*ABCIQueryResponse) ProtoMessage()    {}
func (*ABCIQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{64}
}
func (m *ABCIQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ABCIQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ABCIQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ABCIQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ABCIQueryResponse.Merge(m, src)
}
func (m *ABCIQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *ABCIQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ABCIQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ABCIQueryResponse proto.InternalMessageInfo

func (m *ABCIQueryResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ABCIQueryResponse) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *ABCIQueryResponse) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *ABCIQueryResponse) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ABCIQueryResponse) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ABCIQueryResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ABCIQueryResponse) GetProofOps() *crypto.ProofOps {
	if m != nil {
		return m.ProofOps
	}
	return nil
}

func (m *ABCIQueryResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ABCIQueryResponse) GetCodespace() string {
	if m != nil {
		return m.Codespace
	}
	return ""
}

// GetBlockByHeightRequest is the request type for the Query/GetBlockByHeight RPC method.
type GetBlockByHeightRequest struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetBlockByHeightRequest) Reset()         { *m = GetBlockByHeightRequest{} }
func (m *GetBlockByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockByHeightRequest) ProtoMessage()    {}
func (*GetBlockByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{65}
}
func (m *GetBlockByHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockByHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockByHeightRequest.Merge(m, src)
}
func (m *GetBlockByHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockByHeightRequest proto.InternalMessageInfo

func (m *GetBlockByHeightRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method.
type GetBlockByHeightResponse struct {
	BlockId *types1.BlockID `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Block   *types1.Block   `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *GetBlockByHeightResponse) Reset()         { *m = GetBlockByHeightResponse{} }
func (m *GetBlockByHeightResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlockByHeightResponse) ProtoMessage()    {}
func (*GetBlockByHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2500e6c93f0531d, []int{66}
}
func (m *GetBlockByHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockByHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockByHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockByHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockByHeightResponse.Merge(m, src)
}
func (m *GetBlockByHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockByHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockByHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockByHeightResponse proto.InternalMessageInfo

func (m *GetBlockByHeightResponse) GetBlockId() *types1.BlockID {
	if m != nil {
		return m.BlockId
	}
	return nil
}

func (m *GetBlockByHeightResponse) GetBlock() *types1.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func init() {
	proto.RegisterType((*InfoRequest)(nil), "penumbra.client.v1alpha1.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "penumbra.client.v1alpha1.InfoResponse")
	proto.RegisterType((*CompactBlockRangeRequest)(nil), "penumbra.client.v1alpha1.CompactBlockRangeRequest")
	proto.RegisterType((*CompactBlockRangeResponse)(nil), "penumbra.client.v1alpha1.CompactBlockRangeResponse")
	proto.RegisterType((*ChainParametersRequest)(nil), "penumbra.client.v1alpha1.ChainParametersRequest")
	proto.RegisterType((*EpochByHeightRequest)(nil), "penumbra.client.v1alpha1.EpochByHeightRequest")
	proto.RegisterType((*EpochByHeightResponse)(nil), "penumbra.client.v1alpha1.EpochByHeightResponse")
	proto.RegisterType((*ChainParametersResponse)(nil), "penumbra.client.v1alpha1.ChainParametersResponse")
	proto.RegisterType((*ValidatorInfoRequest)(nil), "penumbra.client.v1alpha1.ValidatorInfoRequest")
	proto.RegisterType((*ValidatorInfoResponse)(nil), "penumbra.client.v1alpha1.ValidatorInfoResponse")
	proto.RegisterType((*TransactionByNoteRequest)(nil), "penumbra.client.v1alpha1.TransactionByNoteRequest")
	proto.RegisterType((*TransactionByNoteResponse)(nil), "penumbra.client.v1alpha1.TransactionByNoteResponse")
	proto.RegisterType((*ValidatorStatusRequest)(nil), "penumbra.client.v1alpha1.ValidatorStatusRequest")
	proto.RegisterType((*ValidatorStatusResponse)(nil), "penumbra.client.v1alpha1.ValidatorStatusResponse")
	proto.RegisterType((*ValidatorPenaltyRequest)(nil), "penumbra.client.v1alpha1.ValidatorPenaltyRequest")
	proto.RegisterType((*ValidatorPenaltyResponse)(nil), "penumbra.client.v1alpha1.ValidatorPenaltyResponse")
	proto.RegisterType((*CurrentValidatorRateRequest)(nil), "penumbra.client.v1alpha1.CurrentValidatorRateRequest")
	proto.RegisterType((*CurrentValidatorRateResponse)(nil), "penumbra.client.v1alpha1.CurrentValidatorRateResponse")
	proto.RegisterType((*NextValidatorRateRequest)(nil), "penumbra.client.v1alpha1.NextValidatorRateRequest")
	proto.RegisterType((*NextValidatorRateResponse)(nil), "penumbra.client.v1alpha1.NextValidatorRateResponse")
	proto.RegisterType((*BatchSwapOutputDataRequest)(nil), "penumbra.client.v1alpha1.BatchSwapOutputDataRequest")
	proto.RegisterType((*BatchSwapOutputDataResponse)(nil), "penumbra.client.v1alpha1.BatchSwapOutputDataResponse")
	proto.RegisterType((*SwapExecutionRequest)(nil), "penumbra.client.v1alpha1.SwapExecutionRequest")
	proto.RegisterType((*SwapExecutionResponse)(nil), "penumbra.client.v1alpha1.SwapExecutionResponse")
	proto.RegisterType((*ArbExecutionRequest)(nil), "penumbra.client.v1alpha1.ArbExecutionRequest")
	proto.RegisterType((*ArbExecutionResponse)(nil), "penumbra.client.v1alpha1.ArbExecutionResponse")
	proto.RegisterType((*SwapExecutionsRequest)(nil), "penumbra.client.v1alpha1.SwapExecutionsRequest")
	proto.RegisterType((*SwapExecutionsResponse)(nil), "penumbra.client.v1alpha1.SwapExecutionsResponse")
	proto.RegisterType((*ArbExecutionsRequest)(nil), "penumbra.client.v1alpha1.ArbExecutionsRequest")
	proto.RegisterType((*ArbExecutionsResponse)(nil), "penumbra.client.v1alpha1.ArbExecutionsResponse")
	proto.RegisterType((*LiquidityPositionsRequest)(nil), "penumbra.client.v1alpha1.LiquidityPositionsRequest")
	proto.RegisterType((*LiquidityPositionsResponse)(nil), "penumbra.client.v1alpha1.LiquidityPositionsResponse")
	proto.RegisterType((*LiquidityPositionsByPriceRequest)(nil), "penumbra.client.v1alpha1.LiquidityPositionsByPriceRequest")
	proto.RegisterType((*LiquidityPositionsByPriceResponse)(nil), "penumbra.client.v1alpha1.LiquidityPositionsByPriceResponse")
	proto.RegisterType((*LiquidityPositionByIdRequest)(nil), "penumbra.client.v1alpha1.LiquidityPositionByIdRequest")
	proto.RegisterType((*LiquidityPositionByIdResponse)(nil), "penumbra.client.v1alpha1.LiquidityPositionByIdResponse")
	proto.RegisterType((*LiquidityPositionsByIdRequest)(nil), "penumbra.client.v1alpha1.LiquidityPositionsByIdRequest")
	proto.RegisterType((*LiquidityPositionsByIdResponse)(nil), "penumbra.client.v1alpha1.LiquidityPositionsByIdResponse")
	proto.RegisterType((*SpreadRequest)(nil), "penumbra.client.v1alpha1.SpreadRequest")
	proto.RegisterType((*SpreadResponse)(nil), "penumbra.client.v1alpha1.SpreadResponse")
	proto.RegisterType((*DenomMetadataByIdRequest)(nil), "penumbra.client.v1alpha1.DenomMetadataByIdRequest")
	proto.RegisterType((*DenomMetadataByIdResponse)(nil), "penumbra.client.v1alpha1.DenomMetadataByIdResponse")
	proto.RegisterType((*ProposalInfoRequest)(nil), "penumbra.client.v1alpha1.ProposalInfoRequest")
	proto.RegisterType((*ProposalInfoResponse)(nil), "penumbra.client.v1alpha1.ProposalInfoResponse")
	proto.RegisterType((*ProposalRateDataRequest)(nil), "penumbra.client.v1alpha1.ProposalRateDataRequest")
	proto.RegisterType((*ProposalRateDataResponse)(nil), "penumbra.client.v1alpha1.ProposalRateDataResponse")
	proto.RegisterType((*SimulateTradeRequest)(nil), "penumbra.client.v1alpha1.SimulateTradeRequest")
	proto.RegisterType((*SimulateTradeRequest_Routing)(nil), "penumbra.client.v1alpha1.SimulateTradeRequest.Routing")
	proto.RegisterType((*SimulateTradeRequest_Routing_SingleHop)(nil), "penumbra.client.v1alpha1.SimulateTradeRequest.Routing.SingleHop")
	proto.RegisterType((*SimulateTradeRequest_Routing_Default)(nil), "penumbra.client.v1alpha1.SimulateTradeRequest.Routing.Default")
	proto.RegisterType((*SimulateTradeResponse)(nil), "penumbra.client.v1alpha1.SimulateTradeResponse")
	proto.RegisterType((*KeyValueRequest)(nil), "penumbra.client.v1alpha1.KeyValueRequest")
	proto.RegisterType((*KeyValueResponse)(nil), "penumbra.client.v1alpha1.KeyValueResponse")
	proto.RegisterType((*KeyValueResponse_Value)(nil), "penumbra.client.v1alpha1.KeyValueResponse.Value")
	proto.RegisterType((*PrefixValueRequest)(nil), "penumbra.client.v1alpha1.PrefixValueRequest")
	proto.RegisterType((*PrefixValueResponse)(nil), "penumbra.client.v1alpha1.PrefixValueResponse")
	proto.RegisterType((*GetTxRequest)(nil), "penumbra.client.v1alpha1.GetTxRequest")
	proto.RegisterType((*GetTxResponse)(nil), "penumbra.client.v1alpha1.GetTxResponse")
	proto.RegisterType((*TxResult)(nil), "penumbra.client.v1alpha1.TxResult")
	proto.RegisterType((*Tag)(nil), "penumbra.client.v1alpha1.Tag")
	proto.RegisterType((*BroadcastTxAsyncRequest)(nil), "penumbra.client.v1alpha1.BroadcastTxAsyncRequest")
	proto.RegisterType((*BroadcastTxAsyncResponse)(nil), "penumbra.client.v1alpha1.BroadcastTxAsyncResponse")
	proto.RegisterType((*BroadcastTxSyncRequest)(nil), "penumbra.client.v1alpha1.BroadcastTxSyncRequest")
	proto.RegisterType((*BroadcastTxSyncResponse)(nil), "penumbra.client.v1alpha1.BroadcastTxSyncResponse")
	proto.RegisterType((*GetStatusRequest)(nil), "penumbra.client.v1alpha1.GetStatusRequest")
	proto.RegisterType((*GetStatusResponse)(nil), "penumbra.client.v1alpha1.GetStatusResponse")
	proto.RegisterType((*SyncInfo)(nil), "penumbra.client.v1alpha1.SyncInfo")
	proto.RegisterType((*ABCIQueryRequest)(nil), "penumbra.client.v1alpha1.ABCIQueryRequest")
	proto.RegisterType((*ABCIQueryResponse)(nil), "penumbra.client.v1alpha1.ABCIQueryResponse")
	proto.RegisterType((*GetBlockByHeightRequest)(nil), "penumbra.client.v1alpha1.GetBlockByHeightRequest")
	proto.RegisterType((*GetBlockByHeightResponse)(nil), "penumbra.client.v1alpha1.GetBlockByHeightResponse")
}

func init() {
	proto.RegisterFile("penumbra/client/v1alpha1/client.proto", fileDescriptor_d2500e6c93f0531d)
}

var fileDescriptor_d2500e6c93f0531d = []byte{
	// 3246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5b, 0xcb, 0x73, 0xdb, 0xd6,
	0xd5, 0x17, 0x28, 0x4a, 0x22, 0x0f, 0x45, 0x49, 0x86, 0x25, 0x99, 0x66, 0xfc, 0x0a, 0x12, 0x3f,
	0xe2, 0xc4, 0x94, 0xc5, 0x3c, 0x3e, 0xc7, 0xf9, 0xbe, 0xe4, 0x93, 0x64, 0xc7, 0x66, 0xd2, 0xc4,
	0x0c, 0x24, 0x3b, 0xa9, 0x93, 0x0c, 0x7b, 0x05, 0x5c, 0x91, 0x18, 0x91, 0x00, 0x0c, 0x5c, 0xd2,
	0xe4, 0x34, 0xd3, 0x36, 0x69, 0x3b, 0x6d, 0x17, 0xed, 0x64, 0x95, 0x4d, 0xa7, 0x33, 0x9d, 0x2c,
	0xda, 0x99, 0xae, 0xbb, 0xc8, 0xaa, 0xeb, 0x4c, 0xa7, 0x8b, 0x4c, 0x17, 0x69, 0x97, 0x1d, 0x67,
	0xd7, 0xfe, 0x01, 0xdd, 0x76, 0xee, 0x03, 0x0f, 0x82, 0x00, 0x44, 0xca, 0x8e, 0xbb, 0xc3, 0xbd,
	0xf7, 0x3c, 0x7e, 0xe7, 0xdc, 0x73, 0x0f, 0x70, 0xcf, 0x21, 0xe1, 0xac, 0x8d, 0xcd, 0x6e, 0x67,
	0xd7, 0x41, 0x6b, 0x5a, 0xdb, 0xc0, 0x26, 0x59, 0xeb, 0xad, 0xa3, 0xb6, 0xdd, 0x42, 0xeb, 0x62,
	0x5c, 0xb1, 0x1d, 0x8b, 0x58, 0x72, 0xc9, 0x23, 0xab, 0x88, 0x69, 0x8f, 0xac, 0x7c, 0xba, 0x69,
	0x59, 0xcd, 0x36, 0x5e, 0x63, 0x74, 0xbb, 0xdd, 0xbd, 0x35, 0x62, 0x74, 0xb0, 0x4b, 0x50, 0xc7,
	0xe6, 0xac, 0xe5, 0xf3, 0xc6, 0xae, 0xb6, 0xa6, 0x59, 0x0e, 0x5e, 0xd3, 0xac, 0x4e, 0xc7, 0x20,
	0x1d, 0xae, 0x25, 0x34, 0x12, 0x84, 0x17, 0x02, 0x28, 0x8c, 0xba, 0x85, 0x0c, 0x33, 0x04, 0x87,
	0x0e, 0x05, 0xe5, 0xc5, 0x08, 0xa5, 0x33, 0xb0, 0x89, 0x15, 0x22, 0x65, 0x63, 0x41, 0xfb, 0xf4,
	0x30, 0xad, 0x8e, 0xfb, 0x01, 0xa1, 0x8e, 0xfb, 0xf1, 0xba, 0x5d, 0x82, 0xf6, 0x71, 0x40, 0xc7,
	0x86, 0x82, 0xf2, 0x24, 0xc1, 0xa6, 0x8e, 0x9d, 0x8e, 0x61, 0x12, 0x4f, 0xb1, 0xed, 0x58, 0xd6,
	0x9e, 0x58, 0x2e, 0x87, 0x96, 0xed, 0xaa, 0xbd, 0x46, 0x06, 0x36, 0x76, 0xc5, 0xda, 0x89, 0xd0,
	0x1a, 0x9b, 0x5f, 0xdb, 0x6d, 0x5b, 0xda, 0x7e, 0xe2, 0x6a, 0x98, 0xf7, 0xcc, 0xc8, 0x6a, 0x0f,
	0xb5, 0x0d, 0x1d, 0x11, 0xcb, 0xe1, 0x14, 0xca, 0xa7, 0x12, 0x14, 0x6a, 0xe6, 0x9e, 0xa5, 0xe2,
	0x7b, 0x5d, 0xec, 0x12, 0xb9, 0x04, 0x73, 0x3d, 0xec, 0xb8, 0x86, 0x65, 0x96, 0xa4, 0x33, 0xd2,
	0x85, 0xbc, 0xea, 0x0d, 0xe5, 0xa7, 0xa0, 0xc8, 0x14, 0x37, 0xbc, 0xf5, 0xcc, 0x19, 0xe9, 0x42,
	0x56, 0x9d, 0x67, 0x93, 0x77, 0x04, 0xd1, 0x69, 0x28, 0xd8, 0x55, 0xdb, 0x27, 0x99, 0x66, 0x24,
	0x60, 0x57, 0x6d, 0x8f, 0xe0, 0x49, 0x98, 0x47, 0xbb, 0x9a, 0xe1, 0x53, 0x64, 0x99, 0x92, 0x02,
	0x9d, 0x13, 0x24, 0xca, 0x17, 0x12, 0xcc, 0x73, 0x48, 0xae, 0x6d, 0x99, 0x2e, 0x96, 0x65, 0xc8,
	0xea, 0x88, 0x20, 0x06, 0x68, 0x5e, 0x65, 0xcf, 0x61, 0x9c, 0x99, 0x61, 0x9c, 0xa7, 0xa1, 0x80,
	0xec, 0x11, 0x08, 0xc8, 0xf6, 0x21, 0x5c, 0x84, 0x23, 0x6d, 0xe4, 0x92, 0x06, 0xb7, 0xa6, 0x85,
	0x8d, 0x66, 0x8b, 0x30, 0x1c, 0x59, 0x75, 0x91, 0x2e, 0x6c, 0xd2, 0xf9, 0x9b, 0x6c, 0x5a, 0xbe,
	0x04, 0x47, 0x43, 0xb4, 0x54, 0x6e, 0x0b, 0xb9, 0xad, 0xd2, 0x0c, 0x43, 0xb2, 0xe4, 0x53, 0x6f,
	0xd8, 0xf6, 0x4d, 0xe4, 0xb6, 0x94, 0xcf, 0x24, 0x28, 0x6d, 0x59, 0x1d, 0x1b, 0x69, 0x7c, 0x5e,
	0x45, 0x66, 0x13, 0x7b, 0xae, 0x3d, 0x0e, 0x39, 0x16, 0x8e, 0x0d, 0x43, 0xf7, 0x7c, 0xcb, 0xc6,
	0x35, 0x9d, 0x7a, 0xc5, 0x25, 0xc8, 0x21, 0x1e, 0x1a, 0xee, 0xda, 0x02, 0x9b, 0x13, 0x48, 0x4e,
	0x02, 0x60, 0x53, 0xf7, 0x08, 0xb8, 0x55, 0x79, 0x6c, 0xea, 0xc1, 0xf2, 0x3e, 0xc6, 0x76, 0x03,
	0xb5, 0x8d, 0x1e, 0x66, 0xd6, 0xe4, 0xd4, 0x3c, 0x9d, 0xd9, 0xa0, 0x13, 0x4a, 0x1b, 0x8e, 0xc7,
	0xe0, 0x12, 0xfe, 0xbd, 0x05, 0x45, 0x8d, 0x2f, 0x72, 0x3b, 0x19, 0xba, 0x42, 0xf5, 0x62, 0x25,
	0x38, 0xbe, 0x96, 0x83, 0x2b, 0xfc, 0x2c, 0x79, 0xe1, 0x5d, 0x19, 0x92, 0x37, 0xaf, 0x85, 0x46,
	0xca, 0xf3, 0xb0, 0xba, 0x45, 0x89, 0xeb, 0xc8, 0x41, 0x1d, 0x4c, 0xb0, 0xe3, 0x1e, 0xec, 0x03,
	0xa5, 0x02, 0xcb, 0xd7, 0x6d, 0x4b, 0x6b, 0x6d, 0x0e, 0xb8, 0x49, 0x1e, 0xcb, 0x2a, 0xcc, 0x0a,
	0xa3, 0x25, 0x66, 0xb4, 0x18, 0x29, 0x2a, 0xac, 0x44, 0xe8, 0x85, 0x39, 0x2f, 0xc3, 0x0c, 0xa6,
	0x0b, 0xc2, 0x8c, 0xa7, 0xd2, 0xcd, 0x60, 0x32, 0x54, 0xce, 0xa1, 0xb8, 0x70, 0x6c, 0x04, 0xb8,
	0x90, 0xfa, 0x1e, 0x2c, 0x71, 0xe4, 0xb6, 0xbf, 0x26, 0x14, 0x5c, 0x3a, 0xc0, 0x4f, 0x11, 0x81,
	0x8b, 0xda, 0xf0, 0x84, 0x72, 0x07, 0x96, 0xef, 0x78, 0xa7, 0x32, 0x7c, 0x14, 0x53, 0xe2, 0xe5,
	0x29, 0x28, 0xba, 0x2d, 0xeb, 0x7e, 0xc3, 0x30, 0x91, 0x46, 0xe8, 0x86, 0x67, 0xd8, 0x86, 0xcf,
	0xd3, 0xc9, 0x9a, 0x98, 0x53, 0xf6, 0x61, 0x25, 0x22, 0x57, 0x98, 0xa2, 0xc2, 0x82, 0x9f, 0x06,
	0x1a, 0x86, 0xb9, 0x67, 0x09, 0x43, 0x9e, 0x8d, 0x18, 0xc2, 0x13, 0x98, 0x6f, 0xc8, 0xb0, 0xb0,
	0x62, 0x2f, 0x3c, 0x54, 0x7e, 0x25, 0x41, 0x69, 0xc7, 0x41, 0xa6, 0x4b, 0x95, 0x5b, 0xe6, 0xe6,
	0xe0, 0x6d, 0x8b, 0x8c, 0x13, 0xf9, 0xef, 0xc2, 0xa2, 0x69, 0x11, 0xdc, 0x08, 0xf2, 0x3a, 0xb3,
	0xa5, 0x50, 0xad, 0x44, 0xbd, 0xca, 0xd3, 0xb3, 0x8f, 0x66, 0x9b, 0x20, 0x82, 0xb7, 0x7c, 0x2e,
	0x75, 0x81, 0x8a, 0x09, 0xc6, 0xca, 0x1e, 0x1c, 0x8f, 0xc1, 0x23, 0x3c, 0x50, 0x83, 0x02, 0xd3,
	0xea, 0x5a, 0x5d, 0x47, 0xc3, 0xc2, 0xfc, 0x0b, 0xe9, 0xfb, 0x48, 0x05, 0x6c, 0x33, 0x7a, 0x15,
	0x4c, 0xff, 0x59, 0xf9, 0x44, 0x82, 0x55, 0xdf, 0x33, 0x14, 0x54, 0x77, 0x8c, 0x60, 0x97, 0xdf,
	0x82, 0x79, 0x43, 0xc7, 0x26, 0x31, 0xc8, 0xa0, 0xb1, 0x8f, 0x07, 0xc2, 0xe6, 0x8b, 0x07, 0xd8,
	0x5c, 0x13, 0x2c, 0x6f, 0xe2, 0x81, 0x5a, 0x30, 0x82, 0x81, 0xf2, 0x3d, 0x38, 0x36, 0x82, 0x41,
	0x98, 0x7a, 0x1d, 0x66, 0x5d, 0x36, 0x93, 0x10, 0xad, 0x49, 0x9b, 0x2c, 0xc4, 0x08, 0x66, 0xe5,
	0x6f, 0x52, 0x48, 0x45, 0x1d, 0x9b, 0xa8, 0x4d, 0x06, 0x8f, 0xdd, 0x4e, 0x9a, 0xba, 0x79, 0x9e,
	0x64, 0xc7, 0xb5, 0x61, 0x98, 0x3a, 0xee, 0x8b, 0x5c, 0xb8, 0xc8, 0x16, 0xd8, 0x69, 0xae, 0xd1,
	0x69, 0xf9, 0x1c, 0x2c, 0xd2, 0x84, 0x19, 0xa6, 0xe4, 0x49, 0xbe, 0x88, 0x4d, 0x3d, 0xa0, 0x53,
	0xde, 0x87, 0xd2, 0xa8, 0x61, 0xc2, 0x79, 0xaf, 0xc1, 0x9c, 0xcd, 0xa7, 0x84, 0xf7, 0xce, 0xa6,
	0x7b, 0xcf, 0xe3, 0xf7, 0xb8, 0x94, 0x9f, 0x49, 0xf0, 0xc4, 0x56, 0xd7, 0x71, 0xb0, 0x49, 0x7c,
	0x25, 0x2a, 0x1a, 0xeb, 0x64, 0x3c, 0xe2, 0x10, 0xb9, 0x0b, 0x27, 0xe2, 0x81, 0x08, 0x53, 0xaf,
	0x86, 0x5e, 0xb2, 0x85, 0xea, 0xb9, 0x74, 0x3b, 0x29, 0xe7, 0x35, 0x44, 0x10, 0x7f, 0x19, 0x2b,
	0x3f, 0x91, 0xa0, 0xf4, 0x36, 0xee, 0xff, 0xb7, 0x4d, 0x7c, 0x17, 0x8e, 0xc7, 0xa0, 0x78, 0x04,
	0xf6, 0xfd, 0x5a, 0x82, 0xf2, 0x26, 0x22, 0x5a, 0x6b, 0xfb, 0x3e, 0xb2, 0x6f, 0x75, 0x89, 0xdd,
	0x25, 0x6c, 0xf5, 0x60, 0x0b, 0x83, 0x97, 0x57, 0x26, 0xfc, 0xf2, 0x92, 0xdf, 0x80, 0x79, 0xe2,
	0x20, 0xdd, 0x30, 0x9b, 0x0d, 0x1b, 0x19, 0x0e, 0x8b, 0xe1, 0x42, 0xf5, 0x7c, 0x04, 0x15, 0xfd,
	0xd2, 0xf4, 0x31, 0xed, 0x70, 0xfa, 0x3a, 0x32, 0x1c, 0xb5, 0x40, 0x82, 0x81, 0xb2, 0x0b, 0x4f,
	0xc4, 0x82, 0x13, 0x86, 0x6f, 0x0d, 0x19, 0xbe, 0x96, 0xa6, 0x22, 0x4e, 0x0c, 0xf7, 0xc0, 0x6f,
	0x24, 0x58, 0xa6, 0x0b, 0xd7, 0xfb, 0x58, 0xeb, 0xd2, 0x84, 0xfa, 0x10, 0xb6, 0xab, 0xb1, 0xb6,
	0xa7, 0x02, 0xbb, 0x66, 0x38, 0x58, 0x23, 0x58, 0x4f, 0xf4, 0x81, 0x01, 0x2b, 0x11, 0x78, 0xc2,
	0xfa, 0x3a, 0x2c, 0xb8, 0xf7, 0x91, 0xdd, 0xc0, 0xde, 0x8a, 0xf0, 0xc3, 0x33, 0x69, 0xea, 0x86,
	0x45, 0x15, 0xdd, 0xf0, 0x50, 0xb9, 0x09, 0x47, 0x37, 0x9c, 0xdd, 0x47, 0xe0, 0x08, 0xe5, 0x47,
	0x12, 0x2c, 0x0f, 0x8b, 0xfa, 0xb6, 0x40, 0x27, 0x42, 0xf8, 0x52, 0x8a, 0x38, 0xce, 0x7d, 0x2c,
	0x5f, 0xab, 0xd1, 0x10, 0xc8, 0x3e, 0x82, 0x10, 0xf8, 0x5a, 0x82, 0xd5, 0xa8, 0x29, 0x8f, 0xdb,
	0x9f, 0xdf, 0x4a, 0x6c, 0xbb, 0xc3, 0x51, 0xf2, 0x58, 0x76, 0x48, 0xf9, 0x58, 0x82, 0x95, 0x88,
	0xd6, 0xc7, 0x1e, 0x9c, 0x1f, 0xc2, 0xf1, 0xef, 0x18, 0xf7, 0xba, 0x86, 0x6e, 0x90, 0x41, 0xdd,
	0x72, 0x8d, 0x71, 0xad, 0x3f, 0x0b, 0x0b, 0x86, 0xa9, 0xb5, 0xbb, 0x3a, 0x6e, 0x68, 0x6d, 0xcb,
	0xc5, 0xba, 0xb8, 0x0f, 0x15, 0xc5, 0xec, 0x16, 0x9b, 0x54, 0xee, 0x40, 0x39, 0x4e, 0xbc, 0x30,
	0xf3, 0xca, 0x50, 0xda, 0x7c, 0x3a, 0xcd, 0x38, 0x8f, 0x59, 0xe4, 0xca, 0xdf, 0x4b, 0x70, 0x66,
	0x54, 0xf0, 0xe6, 0xa0, 0xee, 0x18, 0xda, 0x38, 0x6f, 0xc5, 0x68, 0x0c, 0x65, 0x1e, 0x3e, 0x86,
	0xe4, 0x65, 0x98, 0x69, 0x1b, 0x1d, 0x83, 0xb0, 0x9b, 0x6b, 0x56, 0xe5, 0x03, 0xe5, 0x43, 0x78,
	0x32, 0x05, 0xe8, 0x43, 0x3b, 0xe2, 0x13, 0x09, 0x4e, 0x8c, 0xc8, 0xdf, 0x1c, 0xd4, 0xf4, 0x31,
	0x9c, 0x70, 0x03, 0x0a, 0xb6, 0xe0, 0xa0, 0xab, 0x99, 0xd8, 0xb7, 0x76, 0xac, 0xf2, 0x9a, 0xae,
	0x82, 0xed, 0x3f, 0x2b, 0xdf, 0x85, 0x93, 0x09, 0x18, 0x1e, 0xda, 0xbe, 0x1f, 0x4b, 0x31, 0xb2,
	0xdd, 0xc3, 0x1a, 0x38, 0x7d, 0x48, 0x03, 0xef, 0xc2, 0xa9, 0x24, 0x10, 0x0f, 0x6d, 0x61, 0x0f,
	0x8a, 0xdb, 0xb6, 0x83, 0xd1, 0x38, 0x06, 0xbd, 0x11, 0x1b, 0xb6, 0x87, 0xfb, 0xa4, 0xf9, 0x53,
	0x06, 0x16, 0x3c, 0xc5, 0xc2, 0x88, 0x1d, 0x58, 0xde, 0xc5, 0x2e, 0x69, 0xac, 0x37, 0x88, 0xd5,
	0xa8, 0x36, 0x3c, 0x07, 0x4c, 0x64, 0xd4, 0x12, 0x95, 0xb0, 0xbe, 0x63, 0x55, 0xbd, 0x19, 0x5f,
	0x6a, 0x95, 0x4a, 0x5d, 0x0f, 0xa4, 0x66, 0x26, 0x95, 0x5a, 0xdd, 0xb1, 0xd6, 0x7d, 0xa9, 0xaf,
	0xc1, 0x49, 0x64, 0xdb, 0x8e, 0xd5, 0x6f, 0xe0, 0xbd, 0x3d, 0xcc, 0x6e, 0xe3, 0x0d, 0x9b, 0x1e,
	0x2a, 0x81, 0x9e, 0xa5, 0x5b, 0x49, 0x2d, 0x71, 0xa2, 0xeb, 0x1e, 0x0d, 0x3b, 0x77, 0x14, 0x5e,
	0x8a, 0x00, 0x0e, 0x94, 0x25, 0xb4, 0x04, 0x01, 0x14, 0x89, 0xd2, 0x87, 0xd2, 0x35, 0x6c, 0x5a,
	0x9d, 0xb7, 0x30, 0x41, 0x74, 0x27, 0xc7, 0x0c, 0xca, 0x0d, 0xc8, 0x21, 0xd7, 0xc5, 0x24, 0xf9,
	0xc8, 0x45, 0x3f, 0xc6, 0x37, 0x28, 0x79, 0x4d, 0x57, 0xe7, 0x10, 0x7f, 0x50, 0x6c, 0x38, 0x1e,
	0xa3, 0x59, 0x6c, 0xe2, 0x36, 0x2c, 0xe8, 0x74, 0xb1, 0xd1, 0x11, 0xab, 0x62, 0xfb, 0x9e, 0x3b,
	0x40, 0xcb, 0x90, 0x44, 0xb5, 0xa8, 0x87, 0x87, 0xca, 0x3b, 0x70, 0xb4, 0xee, 0x58, 0xb6, 0xe5,
	0xa2, 0xf6, 0x98, 0xe5, 0x93, 0xd3, 0x50, 0xb0, 0x05, 0x87, 0x67, 0x69, 0x56, 0x05, 0x6f, 0xaa,
	0xa6, 0x2b, 0xfb, 0xb0, 0x3c, 0x2c, 0x52, 0xe0, 0x7f, 0x0e, 0x64, 0xfe, 0x5e, 0x1d, 0xaa, 0x1d,
	0xf2, 0xba, 0xd4, 0x12, 0x5b, 0x09, 0x17, 0x0f, 0xcf, 0xc2, 0x02, 0xa7, 0x1e, 0x0a, 0xab, 0xac,
	0x5a, 0x64, 0xb3, 0x5e, 0xb4, 0x28, 0xb7, 0xe1, 0x98, 0xa7, 0xcc, 0xbf, 0x77, 0x3c, 0x02, 0x1b,
	0x1a, 0x50, 0x1a, 0x15, 0xeb, 0xdf, 0x09, 0xf2, 0x0e, 0x22, 0xb8, 0x71, 0x88, 0x1b, 0x51, 0xce,
	0x11, 0x4f, 0xca, 0x5f, 0xa7, 0x61, 0x79, 0xdb, 0xe8, 0x74, 0xdb, 0x88, 0x60, 0x7a, 0x92, 0xfd,
	0x77, 0xdb, 0x55, 0x98, 0x31, 0x4c, 0xbb, 0x4b, 0x12, 0xce, 0x66, 0x74, 0x73, 0xef, 0xa0, 0x76,
	0x17, 0xab, 0x9c, 0x45, 0x7e, 0x15, 0x66, 0x2d, 0x76, 0xf9, 0x98, 0x30, 0xfe, 0x04, 0x97, 0x5c,
	0x87, 0x39, 0xc7, 0xea, 0x12, 0xc3, 0x6c, 0x8a, 0x6f, 0xaf, 0x97, 0x2a, 0x49, 0x4d, 0x88, 0x4a,
	0x1c, 0xf8, 0x8a, 0xca, 0xb9, 0x55, 0x4f, 0x4c, 0xf9, 0x5f, 0x12, 0xcc, 0x89, 0x49, 0xf9, 0x2e,
	0xcc, 0xe9, 0x78, 0x0f, 0x75, 0xdb, 0x9e, 0x6d, 0xaf, 0x1e, 0x4e, 0x7a, 0xe5, 0x1a, 0x97, 0x72,
	0x73, 0x4a, 0xf5, 0x04, 0xca, 0x08, 0xc0, 0x35, 0xcc, 0x66, 0x1b, 0x37, 0x5a, 0x96, 0x2d, 0xac,
	0xff, 0xff, 0x43, 0x8a, 0xdf, 0x66, 0x82, 0x6e, 0x5a, 0xf6, 0xcd, 0x29, 0x35, 0xef, 0x7a, 0x83,
	0x72, 0x01, 0xf2, 0xfe, 0x4a, 0x39, 0x0f, 0x73, 0x02, 0xc5, 0x66, 0x1e, 0xe6, 0x5c, 0x4c, 0x28,
	0xa7, 0x72, 0x17, 0x56, 0x22, 0x92, 0x45, 0xc8, 0x6c, 0xf8, 0x1b, 0x33, 0xf1, 0xe7, 0x9e, 0x60,
	0x54, 0x76, 0x60, 0xf1, 0x4d, 0x3c, 0xe0, 0xdb, 0x7d, 0x70, 0x80, 0x2f, 0xc1, 0xb4, 0x57, 0x13,
	0xc8, 0xab, 0xf4, 0x91, 0x7e, 0xc4, 0xb0, 0xa6, 0x09, 0xdb, 0xd9, 0x9c, 0xca, 0x07, 0xca, 0x1f,
	0x25, 0x58, 0x0a, 0xc4, 0x0a, 0xb4, 0xaf, 0xc3, 0x4c, 0x8f, 0x4e, 0x08, 0xb0, 0x97, 0x93, 0xfd,
	0x18, 0x65, 0xf5, 0xc2, 0x91, 0xb1, 0xcb, 0x2f, 0x7b, 0x2a, 0x33, 0xa2, 0x96, 0x6c, 0xec, 0x6a,
	0x22, 0x10, 0x83, 0x46, 0x54, 0x6f, 0xbd, 0xf2, 0x16, 0x76, 0xf6, 0xdb, 0xb8, 0x4e, 0x49, 0x05,
	0xae, 0xf2, 0x49, 0x98, 0x61, 0xa2, 0x28, 0xec, 0x00, 0xcb, 0xbc, 0x90, 0xac, 0xdc, 0x00, 0xb9,
	0xee, 0xe0, 0x3d, 0xa3, 0x3f, 0xae, 0x3f, 0x56, 0x61, 0xd6, 0x66, 0x0c, 0xc2, 0x25, 0x62, 0xa4,
	0xfc, 0x1f, 0x4d, 0x7f, 0x21, 0x41, 0xc2, 0x03, 0xc2, 0x7d, 0xd2, 0x90, 0xfb, 0x38, 0x8e, 0x4c,
	0x18, 0xc7, 0x15, 0x98, 0xbf, 0x81, 0xc9, 0x4e, 0xdf, 0x43, 0x20, 0x43, 0x96, 0xb5, 0x38, 0x44,
	0xb3, 0x85, 0x3e, 0x0b, 0xc7, 0xfb, 0x65, 0x66, 0x3e, 0x50, 0x3e, 0x97, 0xa0, 0x28, 0x58, 0x83,
	0x46, 0xcd, 0x08, 0x6f, 0xd2, 0x4d, 0x69, 0x99, 0x26, 0x89, 0xa0, 0x7c, 0xc7, 0x07, 0xf2, 0x6b,
	0x90, 0x27, 0xfd, 0x86, 0x83, 0x5d, 0x7a, 0xc4, 0xf8, 0xad, 0x50, 0x49, 0xde, 0x3b, 0xa6, 0xba,
	0xdb, 0x26, 0x6a, 0x8e, 0x88, 0x27, 0x79, 0x01, 0x32, 0xa4, 0x2f, 0xfa, 0x33, 0x19, 0xd2, 0x57,
	0x7e, 0x21, 0x41, 0xce, 0x23, 0xa3, 0x3e, 0x69, 0x5b, 0x4d, 0xcf, 0x27, 0x6d, 0xab, 0x49, 0x6f,
	0x41, 0x4d, 0xe4, 0x36, 0xee, 0x23, 0x93, 0x60, 0x2f, 0x89, 0xe6, 0x9b, 0xc8, 0x7d, 0x97, 0x4d,
	0xd0, 0xed, 0xa0, 0xcb, 0x5d, 0x7a, 0x87, 0xe0, 0x38, 0xe7, 0x9a, 0xc8, 0xbd, 0xed, 0x62, 0x5d,
	0x5e, 0x87, 0x2c, 0x41, 0x4d, 0xb7, 0x94, 0x65, 0x1f, 0x6e, 0x27, 0x53, 0x40, 0xa2, 0xa6, 0xca,
	0x48, 0x95, 0x2d, 0x98, 0xde, 0x41, 0xcd, 0xf0, 0xce, 0xcc, 0xa7, 0xec, 0xcc, 0xb0, 0x87, 0x72,
	0xc2, 0x43, 0xca, 0x4d, 0x38, 0xb6, 0xe9, 0x58, 0x48, 0xd7, 0x90, 0x4b, 0x76, 0xfa, 0x1b, 0xee,
	0xc0, 0xd4, 0x42, 0x9d, 0x12, 0xd6, 0x9c, 0x70, 0x85, 0x6c, 0x31, 0x92, 0x57, 0x60, 0xd6, 0xc1,
	0xf7, 0x82, 0xb7, 0xc4, 0x8c, 0x83, 0xef, 0xd5, 0x74, 0xa5, 0x05, 0xa5, 0x51, 0x49, 0xc1, 0x4e,
	0x6a, 0x96, 0x8e, 0xc5, 0xab, 0x8d, 0x3d, 0xfb, 0x6d, 0xb8, 0x4c, 0xa8, 0x0d, 0x27, 0x3c, 0x3a,
	0x1d, 0x78, 0xd4, 0x8b, 0x81, 0x6c, 0x10, 0x03, 0xca, 0x0d, 0x58, 0x0d, 0x69, 0xda, 0x3e, 0x3c,
	0xe4, 0xe6, 0x90, 0xf1, 0xdb, 0xdf, 0x1e, 0x62, 0x19, 0x96, 0x6e, 0x60, 0x32, 0x54, 0xce, 0x57,
	0xbe, 0x96, 0xe0, 0x48, 0x68, 0x52, 0xe8, 0xfd, 0x5f, 0xc8, 0x9b, 0x96, 0x8e, 0xc3, 0x7d, 0x94,
	0xd3, 0x95, 0xa0, 0xed, 0x5a, 0xb1, 0xab, 0xb6, 0x97, 0xed, 0xdf, 0xb6, 0x74, 0xcc, 0x3e, 0x27,
	0x72, 0xa6, 0x78, 0xa2, 0xf1, 0x4e, 0xfd, 0xce, 0xb9, 0x33, 0x07, 0xc5, 0x3b, 0x35, 0x98, 0x0b,
	0x70, 0xc5, 0x93, 0xbc, 0x39, 0xd2, 0xcb, 0xe1, 0xaf, 0xbd, 0x27, 0xc2, 0x18, 0x78, 0x4b, 0x38,
	0xa8, 0x8b, 0x46, 0x7a, 0x37, 0xff, 0x96, 0x20, 0xe7, 0x89, 0xe6, 0xdd, 0x51, 0x82, 0x83, 0xfe,
	0x68, 0x70, 0xa0, 0x17, 0xf9, 0x02, 0xff, 0xc4, 0xa1, 0x67, 0xfb, 0x1c, 0x88, 0xa9, 0xa0, 0x33,
	0xca, 0x5d, 0x5d, 0xe4, 0xd3, 0xa2, 0x2d, 0x2a, 0x57, 0xe0, 0xe8, 0xb0, 0xcc, 0x70, 0xd1, 0xe1,
	0x48, 0x58, 0x2a, 0xcf, 0x0d, 0xaf, 0x47, 0x30, 0x10, 0xa3, 0x83, 0x45, 0x36, 0x28, 0x57, 0xf8,
	0x2f, 0x07, 0x2a, 0xde, 0x2f, 0x07, 0x2a, 0x3b, 0xde, 0x2f, 0x07, 0x86, 0xf0, 0xd1, 0x59, 0xfa,
	0x8d, 0xa4, 0x21, 0xa2, 0xb5, 0xe8, 0x9d, 0xa4, 0x6b, 0x97, 0xf2, 0xec, 0x1c, 0x81, 0x37, 0x75,
	0xdb, 0x56, 0x5a, 0xb0, 0xb4, 0xb1, 0xb9, 0x55, 0x7b, 0xa7, 0x8b, 0x9d, 0x41, 0x28, 0x01, 0x8e,
	0x74, 0x9b, 0x65, 0xc8, 0xda, 0x88, 0xb4, 0x44, 0xe6, 0x65, 0xcf, 0xa1, 0xc4, 0x46, 0xed, 0x98,
	0x0e, 0x27, 0x36, 0x9e, 0x2c, 0xb3, 0xe1, 0x64, 0xf9, 0x71, 0x06, 0x8e, 0x84, 0x54, 0xc5, 0x04,
	0x6d, 0x51, 0x04, 0x6d, 0x6c, 0x80, 0xb2, 0x9d, 0xe5, 0xbd, 0x72, 0xf6, 0x1c, 0x24, 0x87, 0x19,
	0xa6, 0x5c, 0xa4, 0x4f, 0x91, 0x5a, 0x66, 0x63, 0x52, 0xcb, 0x5c, 0x38, 0xb5, 0x5c, 0x81, 0x3c,
	0x7b, 0x49, 0x35, 0x2c, 0xdb, 0x2d, 0xe5, 0x46, 0x03, 0x46, 0x7c, 0x65, 0xb1, 0xf7, 0xd9, 0x2d,
	0xdb, 0x55, 0x73, 0xb6, 0x78, 0x0a, 0x59, 0x9d, 0x1f, 0xb2, 0xfa, 0x04, 0xe4, 0x29, 0x7a, 0xd7,
	0x46, 0x1a, 0x2e, 0x01, 0x03, 0x1a, 0x4c, 0xbc, 0x91, 0xcd, 0x65, 0x96, 0xa6, 0x95, 0x75, 0x38,
	0x76, 0x03, 0xf3, 0xed, 0x49, 0x6f, 0xf2, 0xfa, 0x62, 0x95, 0x1f, 0x42, 0x69, 0x94, 0x45, 0x38,
	0xef, 0x05, 0xc8, 0xf1, 0xf0, 0x10, 0xef, 0xca, 0x42, 0xf5, 0xf8, 0x68, 0xd0, 0x33, 0xd6, 0xda,
	0x35, 0x75, 0x8e, 0x91, 0xd6, 0x74, 0xf9, 0x12, 0xcc, 0xf0, 0x26, 0x37, 0x3f, 0x6d, 0xc7, 0x12,
	0x58, 0x54, 0x4e, 0x55, 0xfd, 0x4b, 0x16, 0x56, 0x6e, 0xed, 0xb6, 0x8d, 0x9e, 0x61, 0x75, 0x5d,
	0xb6, 0x79, 0xdb, 0xd8, 0xe9, 0x19, 0x1a, 0x96, 0x7f, 0x00, 0x47, 0x46, 0x5a, 0xea, 0x72, 0x35,
	0xf9, 0xf0, 0x26, 0xfd, 0x2e, 0xa0, 0xfc, 0xfc, 0x44, 0x3c, 0xdc, 0xf8, 0xcb, 0x92, 0xdc, 0x83,
	0xc5, 0x48, 0x6b, 0x59, 0x4e, 0xf9, 0xcc, 0x89, 0xef, 0xc7, 0x97, 0xd7, 0x27, 0xe0, 0x10, 0x6e,
	0xb7, 0xa1, 0x38, 0xd4, 0x77, 0x97, 0x2b, 0xc9, 0x32, 0xe2, 0x1a, 0xfa, 0xe5, 0xb5, 0xb1, 0xe9,
	0x85, 0x46, 0x07, 0x8a, 0x43, 0xbd, 0xe7, 0x34, 0x8d, 0x71, 0x9d, 0xf4, 0x34, 0x8d, 0xb1, 0x1d,
	0xf2, 0xcb, 0x92, 0x7c, 0x1b, 0xb2, 0x4c, 0xd5, 0xd9, 0x64, 0xd6, 0xb0, 0x86, 0x73, 0x07, 0x91,
	0x71, 0xc1, 0xd5, 0xdf, 0x2e, 0xc3, 0xf2, 0xb6, 0x8d, 0x35, 0x63, 0xcf, 0xd0, 0x86, 0xa2, 0xe9,
	0x23, 0x38, 0x32, 0xd2, 0xae, 0x4e, 0x8b, 0xa6, 0xa4, 0x5e, 0x7b, 0x5a, 0x34, 0x25, 0xf7, 0xc3,
	0x7b, 0xb0, 0x18, 0x69, 0xfc, 0xa6, 0xc5, 0x52, 0x7c, 0xbb, 0x3b, 0x2d, 0x96, 0x92, 0x9a, 0xd3,
	0x03, 0x58, 0x8a, 0xf6, 0x5e, 0xe5, 0x71, 0xc4, 0x0c, 0x37, 0xa0, 0xcb, 0xd5, 0x49, 0x58, 0x84,
	0xea, 0x8f, 0xe0, 0xc8, 0x48, 0xb3, 0x30, 0xcd, 0xe1, 0x49, 0xfd, 0xcd, 0x34, 0x87, 0x27, 0x77,
	0x23, 0x7f, 0x2a, 0xc1, 0x72, 0x5c, 0x3b, 0x56, 0x7e, 0x31, 0xe5, 0x40, 0x26, 0xf7, 0x91, 0xcb,
	0x2f, 0x4d, 0xca, 0x26, 0x70, 0x7c, 0x22, 0xc1, 0xd1, 0x98, 0xae, 0x9f, 0xfc, 0x42, 0xb2, 0xbc,
	0xe4, 0x46, 0x68, 0xf9, 0xc5, 0x09, 0xb9, 0x82, 0x8c, 0x32, 0x74, 0x61, 0x4c, 0x3b, 0xdf, 0x71,
	0x4d, 0xc8, 0xb4, 0xf3, 0x1d, 0xdf, 0x15, 0xec, 0xc0, 0x7c, 0xb8, 0xb9, 0x21, 0x5f, 0x4a, 0x16,
	0x10, 0xd3, 0xeb, 0x2b, 0x57, 0xc6, 0x25, 0x17, 0xea, 0xba, 0xb0, 0x30, 0xdc, 0x99, 0x92, 0xc7,
	0x45, 0xec, 0x1f, 0xae, 0xcb, 0xe3, 0x33, 0xf8, 0x39, 0xcc, 0x81, 0xe2, 0x50, 0x0b, 0x47, 0x1e,
	0x13, 0xb7, 0x3b, 0x86, 0x5f, 0x63, 0x7b, 0x43, 0x97, 0x25, 0xf9, 0x63, 0x09, 0xe4, 0xd1, 0x72,
	0xb4, 0x9c, 0x72, 0x48, 0x12, 0x5b, 0x3c, 0xe5, 0x17, 0x26, 0x63, 0xf2, 0x31, 0xfc, 0x5c, 0x82,
	0x95, 0xd8, 0x9a, 0xbf, 0xfc, 0xd2, 0x04, 0x12, 0x43, 0x25, 0xd3, 0xf2, 0xff, 0x4c, 0xcc, 0x27,
	0x76, 0xfe, 0x97, 0x12, 0xac, 0xc6, 0x57, 0xe7, 0xe5, 0x49, 0x64, 0x86, 0x9b, 0x0a, 0xe5, 0x2b,
	0x93, 0x33, 0xfa, 0xae, 0xf9, 0x4c, 0x8a, 0xeb, 0xa9, 0x89, 0x96, 0x8f, 0x7c, 0x75, 0x32, 0xc9,
	0xe1, 0x86, 0x56, 0xf9, 0x95, 0x43, 0xf1, 0xfa, 0xc0, 0xde, 0x87, 0x59, 0x5e, 0xf0, 0x97, 0xcf,
	0xa7, 0x44, 0x7a, 0xb8, 0x17, 0x51, 0xbe, 0x70, 0x30, 0x61, 0x90, 0xeb, 0x47, 0x6a, 0xd2, 0x69,
	0xb9, 0x3e, 0xa9, 0x74, 0x9e, 0x96, 0xeb, 0x93, 0x8b, 0xde, 0x1d, 0x98, 0x0f, 0x17, 0x93, 0xd3,
	0x92, 0x4d, 0x4c, 0x1d, 0x3b, 0x2d, 0xd9, 0xc4, 0xd6, 0xa8, 0xbf, 0x0f, 0x4b, 0xd1, 0xba, 0x6f,
	0xda, 0x3b, 0x35, 0xa1, 0xf4, 0x9c, 0xf6, 0x4e, 0x4d, 0x2a, 0x2b, 0x5f, 0x96, 0x58, 0x2a, 0x0f,
	0x97, 0x0f, 0x53, 0x53, 0x79, 0x4c, 0x05, 0x33, 0x35, 0x95, 0xc7, 0xd6, 0x25, 0x11, 0xe4, 0xbc,
	0x12, 0x9e, 0xfc, 0xcc, 0x38, 0x65, 0x3e, 0xae, 0xe7, 0xe2, 0xf8, 0x15, 0x41, 0xb9, 0x0d, 0x85,
	0x50, 0x85, 0x4d, 0x7e, 0x2e, 0xcd, 0x33, 0xd1, 0x8a, 0x5e, 0xf9, 0xd2, 0x98, 0xd4, 0x9e, 0x0b,
	0xab, 0x5f, 0xcc, 0xc0, 0xea, 0x8e, 0x7f, 0x27, 0xa9, 0x3b, 0x56, 0xdf, 0xff, 0x48, 0xdc, 0x83,
	0xbc, 0x5f, 0x80, 0x90, 0x53, 0x2c, 0x88, 0x96, 0x2e, 0xca, 0xcf, 0x8e, 0x45, 0xcb, 0x21, 0x28,
	0x53, 0x34, 0x84, 0xa2, 0x95, 0xa1, 0xb4, 0x10, 0x4a, 0xa8, 0x47, 0xa5, 0x85, 0x50, 0x52, 0xe1,
	0x49, 0x99, 0x92, 0xfb, 0xb0, 0x18, 0xa9, 0xf1, 0xa4, 0x7d, 0x8b, 0xc6, 0xd7, 0x95, 0xca, 0xeb,
	0x13, 0x70, 0xf8, 0x9a, 0xef, 0xc2, 0x0c, 0xab, 0x67, 0xca, 0xe7, 0x52, 0xdd, 0xe5, 0xd7, 0x4a,
	0xcb, 0xe7, 0x0f, 0xa4, 0xf3, 0x65, 0xef, 0x41, 0xde, 0xbf, 0xfe, 0xa7, 0x6d, 0x5d, 0xb4, 0x1c,
	0x91, 0xb6, 0x75, 0x23, 0xf5, 0x04, 0xbe, 0x75, 0xd1, 0x0b, 0x73, 0xda, 0xd6, 0x25, 0xdc, 0xc7,
	0xd3, 0xb6, 0x2e, 0xe9, 0x3e, 0xae, 0x4c, 0x6d, 0xfe, 0x2e, 0xf3, 0xe5, 0x83, 0x53, 0xd2, 0x57,
	0x0f, 0x4e, 0x49, 0xff, 0x78, 0x70, 0x4a, 0xfa, 0xf4, 0x9b, 0x53, 0x53, 0x5f, 0x7d, 0x73, 0x6a,
	0xea, 0xef, 0xdf, 0x9c, 0x9a, 0x82, 0x13, 0x9a, 0xd5, 0x49, 0x94, 0xb9, 0x59, 0xd8, 0x62, 0x13,
	0x75, 0xc7, 0x22, 0x56, 0x5d, 0xba, 0xdb, 0x68, 0x1a, 0xa4, 0xd5, 0xdd, 0xad, 0x68, 0x56, 0x67,
	0xcd, 0x25, 0x0e, 0xbd, 0xf8, 0xb6, 0xad, 0x1e, 0xbe, 0xd4, 0xc3, 0x26, 0xe9, 0x3a, 0xd8, 0x5d,
	0x33, 0x4c, 0x82, 0x1d, 0x56, 0x18, 0x27, 0xd8, 0x25, 0x6b, 0xbd, 0x2b, 0xe2, 0x7f, 0x1f, 0x49,
	0x7f, 0x4b, 0x79, 0x85, 0x8f, 0xbd, 0xe1, 0xe7, 0x99, 0xe9, 0xfa, 0xd6, 0x7b, 0x7f, 0xc8, 0x94,
	0xea, 0x1e, 0x20, 0xae, 0xbf, 0x72, 0x47, 0x10, 0xfc, 0x39, 0x58, 0xfa, 0x80, 0x2f, 0x7d, 0xe0,
	0x2d, 0x3d, 0xc8, 0x3c, 0x9d, 0xb4, 0xf4, 0xc1, 0x8d, 0xfa, 0xa6, 0xf7, 0x06, 0xf8, 0x67, 0xa6,
	0xec, 0x91, 0x5d, 0xbd, 0xca, 0xe9, 0xae, 0x5e, 0xf5, 0x08, 0x77, 0x67, 0x59, 0xf5, 0xea, 0xf9,
	0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x02, 0xc6, 0xaa, 0xf8, 0x48, 0x33, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ObliviousQueryServiceClient is the client API for ObliviousQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ObliviousQueryServiceClient interface {
	// Returns a stream of `CompactBlockRangeResponse`s.
	CompactBlockRange(ctx context.Context, in *CompactBlockRangeRequest, opts ...grpc.CallOption) (ObliviousQueryService_CompactBlockRangeClient, error)
	ChainParameters(ctx context.Context, in *ChainParametersRequest, opts ...grpc.CallOption) (*ChainParametersResponse, error)
	EpochByHeight(ctx context.Context, in *EpochByHeightRequest, opts ...grpc.CallOption) (*EpochByHeightResponse, error)
	// Returns a stream of `ValidatorInfoResponse`s.
	ValidatorInfo(ctx context.Context, in *ValidatorInfoRequest, opts ...grpc.CallOption) (ObliviousQueryService_ValidatorInfoClient, error)
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
}

type obliviousQueryServiceClient struct {
	cc grpc1.ClientConn
}

func NewObliviousQueryServiceClient(cc grpc1.ClientConn) ObliviousQueryServiceClient {
	return &obliviousQueryServiceClient{cc}
}

func (c *obliviousQueryServiceClient) CompactBlockRange(ctx context.Context, in *CompactBlockRangeRequest, opts ...grpc.CallOption) (ObliviousQueryService_CompactBlockRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ObliviousQueryService_serviceDesc.Streams[0], "/penumbra.client.v1alpha1.ObliviousQueryService/CompactBlockRange", opts...)
	if err != nil {
		return nil, err
	}
	x := &obliviousQueryServiceCompactBlockRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObliviousQueryService_CompactBlockRangeClient interface {
	Recv() (*CompactBlockRangeResponse, error)
	grpc.ClientStream
}

type obliviousQueryServiceCompactBlockRangeClient struct {
	grpc.ClientStream
}

func (x *obliviousQueryServiceCompactBlockRangeClient) Recv() (*CompactBlockRangeResponse, error) {
	m := new(CompactBlockRangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *obliviousQueryServiceClient) ChainParameters(ctx context.Context, in *ChainParametersRequest, opts ...grpc.CallOption) (*ChainParametersResponse, error) {
	out := new(ChainParametersResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.ObliviousQueryService/ChainParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *obliviousQueryServiceClient) EpochByHeight(ctx context.Context, in *EpochByHeightRequest, opts ...grpc.CallOption) (*EpochByHeightResponse, error) {
	out := new(EpochByHeightResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.ObliviousQueryService/EpochByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *obliviousQueryServiceClient) ValidatorInfo(ctx context.Context, in *ValidatorInfoRequest, opts ...grpc.CallOption) (ObliviousQueryService_ValidatorInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ObliviousQueryService_serviceDesc.Streams[1], "/penumbra.client.v1alpha1.ObliviousQueryService/ValidatorInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &obliviousQueryServiceValidatorInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObliviousQueryService_ValidatorInfoClient interface {
	Recv() (*ValidatorInfoResponse, error)
	grpc.ClientStream
}

type obliviousQueryServiceValidatorInfoClient struct {
	grpc.ClientStream
}

func (x *obliviousQueryServiceValidatorInfoClient) Recv() (*ValidatorInfoResponse, error) {
	m := new(ValidatorInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *obliviousQueryServiceClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.ObliviousQueryService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObliviousQueryServiceServer is the server API for ObliviousQueryService service.
type ObliviousQueryServiceServer interface {
	// Returns a stream of `CompactBlockRangeResponse`s.
	CompactBlockRange(*CompactBlockRangeRequest, ObliviousQueryService_CompactBlockRangeServer) error
	ChainParameters(context.Context, *ChainParametersRequest) (*ChainParametersResponse, error)
	EpochByHeight(context.Context, *EpochByHeightRequest) (*EpochByHeightResponse, error)
	// Returns a stream of `ValidatorInfoResponse`s.
	ValidatorInfo(*ValidatorInfoRequest, ObliviousQueryService_ValidatorInfoServer) error
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
}

// UnimplementedObliviousQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedObliviousQueryServiceServer struct {
}

func (*UnimplementedObliviousQueryServiceServer) CompactBlockRange(req *CompactBlockRangeRequest, srv ObliviousQueryService_CompactBlockRangeServer) error {
	return status.Errorf(codes.Unimplemented, "method CompactBlockRange not implemented")
}
func (*UnimplementedObliviousQueryServiceServer) ChainParameters(ctx context.Context, req *ChainParametersRequest) (*ChainParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainParameters not implemented")
}
func (*UnimplementedObliviousQueryServiceServer) EpochByHeight(ctx context.Context, req *EpochByHeightRequest) (*EpochByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochByHeight not implemented")
}
func (*UnimplementedObliviousQueryServiceServer) ValidatorInfo(req *ValidatorInfoRequest, srv ObliviousQueryService_ValidatorInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method ValidatorInfo not implemented")
}
func (*UnimplementedObliviousQueryServiceServer) Info(ctx context.Context, req *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}

func RegisterObliviousQueryServiceServer(s grpc1.Server, srv ObliviousQueryServiceServer) {
	s.RegisterService(&_ObliviousQueryService_serviceDesc, srv)
}

func _ObliviousQueryService_CompactBlockRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CompactBlockRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObliviousQueryServiceServer).CompactBlockRange(m, &obliviousQueryServiceCompactBlockRangeServer{stream})
}

type ObliviousQueryService_CompactBlockRangeServer interface {
	Send(*CompactBlockRangeResponse) error
	grpc.ServerStream
}

type obliviousQueryServiceCompactBlockRangeServer struct {
	grpc.ServerStream
}

func (x *obliviousQueryServiceCompactBlockRangeServer) Send(m *CompactBlockRangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ObliviousQueryService_ChainParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObliviousQueryServiceServer).ChainParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.ObliviousQueryService/ChainParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObliviousQueryServiceServer).ChainParameters(ctx, req.(*ChainParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObliviousQueryService_EpochByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpochByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObliviousQueryServiceServer).EpochByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.ObliviousQueryService/EpochByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObliviousQueryServiceServer).EpochByHeight(ctx, req.(*EpochByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObliviousQueryService_ValidatorInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ValidatorInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObliviousQueryServiceServer).ValidatorInfo(m, &obliviousQueryServiceValidatorInfoServer{stream})
}

type ObliviousQueryService_ValidatorInfoServer interface {
	Send(*ValidatorInfoResponse) error
	grpc.ServerStream
}

type obliviousQueryServiceValidatorInfoServer struct {
	grpc.ServerStream
}

func (x *obliviousQueryServiceValidatorInfoServer) Send(m *ValidatorInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ObliviousQueryService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObliviousQueryServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.ObliviousQueryService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObliviousQueryServiceServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ObliviousQueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "penumbra.client.v1alpha1.ObliviousQueryService",
	HandlerType: (*ObliviousQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChainParameters",
			Handler:    _ObliviousQueryService_ChainParameters_Handler,
		},
		{
			MethodName: "EpochByHeight",
			Handler:    _ObliviousQueryService_EpochByHeight_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _ObliviousQueryService_Info_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CompactBlockRange",
			Handler:       _ObliviousQueryService_CompactBlockRange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ValidatorInfo",
			Handler:       _ObliviousQueryService_ValidatorInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "penumbra/client/v1alpha1/client.proto",
}

// SpecificQueryServiceClient is the client API for SpecificQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpecificQueryServiceClient interface {
	TransactionByNote(ctx context.Context, in *TransactionByNoteRequest, opts ...grpc.CallOption) (*TransactionByNoteResponse, error)
	ValidatorStatus(ctx context.Context, in *ValidatorStatusRequest, opts ...grpc.CallOption) (*ValidatorStatusResponse, error)
	ValidatorPenalty(ctx context.Context, in *ValidatorPenaltyRequest, opts ...grpc.CallOption) (*ValidatorPenaltyResponse, error)
	NextValidatorRate(ctx context.Context, in *NextValidatorRateRequest, opts ...grpc.CallOption) (*NextValidatorRateResponse, error)
	CurrentValidatorRate(ctx context.Context, in *CurrentValidatorRateRequest, opts ...grpc.CallOption) (*CurrentValidatorRateResponse, error)
	BatchSwapOutputData(ctx context.Context, in *BatchSwapOutputDataRequest, opts ...grpc.CallOption) (*BatchSwapOutputDataResponse, error)
	SwapExecution(ctx context.Context, in *SwapExecutionRequest, opts ...grpc.CallOption) (*SwapExecutionResponse, error)
	ArbExecution(ctx context.Context, in *ArbExecutionRequest, opts ...grpc.CallOption) (*ArbExecutionResponse, error)
	// Returns a stream of `SwapExecutionsResponses`.
	SwapExecutions(ctx context.Context, in *SwapExecutionsRequest, opts ...grpc.CallOption) (SpecificQueryService_SwapExecutionsClient, error)
	// Returns a stream of `ArbExecutionsResponses`.
	ArbExecutions(ctx context.Context, in *ArbExecutionsRequest, opts ...grpc.CallOption) (SpecificQueryService_ArbExecutionsClient, error)
	// Returns a stream of `LiquidityPositionsResponse`s.
	LiquidityPositions(ctx context.Context, in *LiquidityPositionsRequest, opts ...grpc.CallOption) (SpecificQueryService_LiquidityPositionsClient, error)
	LiquidityPositionById(ctx context.Context, in *LiquidityPositionByIdRequest, opts ...grpc.CallOption) (*LiquidityPositionByIdResponse, error)
	// Returns a stream of `LiquidityPositionsByIdResponse`s.
	LiquidityPositionsById(ctx context.Context, in *LiquidityPositionsByIdRequest, opts ...grpc.CallOption) (SpecificQueryService_LiquidityPositionsByIdClient, error)
	// Returns a stream of `LiquidityPositionsByPriceResponse`s.
	LiquidityPositionsByPrice(ctx context.Context, in *LiquidityPositionsByPriceRequest, opts ...grpc.CallOption) (SpecificQueryService_LiquidityPositionsByPriceClient, error)
	Spread(ctx context.Context, in *SpreadRequest, opts ...grpc.CallOption) (*SpreadResponse, error)
	DenomMetadataById(ctx context.Context, in *DenomMetadataByIdRequest, opts ...grpc.CallOption) (*DenomMetadataByIdResponse, error)
	ProposalInfo(ctx context.Context, in *ProposalInfoRequest, opts ...grpc.CallOption) (*ProposalInfoResponse, error)
	ProposalRateData(ctx context.Context, in *ProposalRateDataRequest, opts ...grpc.CallOption) (SpecificQueryService_ProposalRateDataClient, error)
	// Simulate routing and trade execution.
	SimulateTrade(ctx context.Context, in *SimulateTradeRequest, opts ...grpc.CallOption) (*SimulateTradeResponse, error)
	// General-purpose key-value state query API, that can be used to query
	// arbitrary keys in the JMT storage.
	KeyValue(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*KeyValueResponse, error)
	// General-purpose prefixed key-value state query API, that can be used to query
	// arbitrary prefixes in the JMT storage.
	// Returns a stream of `PrefixValueResponse`s.
	PrefixValue(ctx context.Context, in *PrefixValueRequest, opts ...grpc.CallOption) (SpecificQueryService_PrefixValueClient, error)
}

type specificQueryServiceClient struct {
	cc grpc1.ClientConn
}

func NewSpecificQueryServiceClient(cc grpc1.ClientConn) SpecificQueryServiceClient {
	return &specificQueryServiceClient{cc}
}

func (c *specificQueryServiceClient) TransactionByNote(ctx context.Context, in *TransactionByNoteRequest, opts ...grpc.CallOption) (*TransactionByNoteResponse, error) {
	out := new(TransactionByNoteResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.SpecificQueryService/TransactionByNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificQueryServiceClient) ValidatorStatus(ctx context.Context, in *ValidatorStatusRequest, opts ...grpc.CallOption) (*ValidatorStatusResponse, error) {
	out := new(ValidatorStatusResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.SpecificQueryService/ValidatorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificQueryServiceClient) ValidatorPenalty(ctx context.Context, in *ValidatorPenaltyRequest, opts ...grpc.CallOption) (*ValidatorPenaltyResponse, error) {
	out := new(ValidatorPenaltyResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.SpecificQueryService/ValidatorPenalty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificQueryServiceClient) NextValidatorRate(ctx context.Context, in *NextValidatorRateRequest, opts ...grpc.CallOption) (*NextValidatorRateResponse, error) {
	out := new(NextValidatorRateResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.SpecificQueryService/NextValidatorRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificQueryServiceClient) CurrentValidatorRate(ctx context.Context, in *CurrentValidatorRateRequest, opts ...grpc.CallOption) (*CurrentValidatorRateResponse, error) {
	out := new(CurrentValidatorRateResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.SpecificQueryService/CurrentValidatorRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificQueryServiceClient) BatchSwapOutputData(ctx context.Context, in *BatchSwapOutputDataRequest, opts ...grpc.CallOption) (*BatchSwapOutputDataResponse, error) {
	out := new(BatchSwapOutputDataResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.SpecificQueryService/BatchSwapOutputData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificQueryServiceClient) SwapExecution(ctx context.Context, in *SwapExecutionRequest, opts ...grpc.CallOption) (*SwapExecutionResponse, error) {
	out := new(SwapExecutionResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.SpecificQueryService/SwapExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificQueryServiceClient) ArbExecution(ctx context.Context, in *ArbExecutionRequest, opts ...grpc.CallOption) (*ArbExecutionResponse, error) {
	out := new(ArbExecutionResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.SpecificQueryService/ArbExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificQueryServiceClient) SwapExecutions(ctx context.Context, in *SwapExecutionsRequest, opts ...grpc.CallOption) (SpecificQueryService_SwapExecutionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpecificQueryService_serviceDesc.Streams[0], "/penumbra.client.v1alpha1.SpecificQueryService/SwapExecutions", opts...)
	if err != nil {
		return nil, err
	}
	x := &specificQueryServiceSwapExecutionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpecificQueryService_SwapExecutionsClient interface {
	Recv() (*SwapExecutionsResponse, error)
	grpc.ClientStream
}

type specificQueryServiceSwapExecutionsClient struct {
	grpc.ClientStream
}

func (x *specificQueryServiceSwapExecutionsClient) Recv() (*SwapExecutionsResponse, error) {
	m := new(SwapExecutionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *specificQueryServiceClient) ArbExecutions(ctx context.Context, in *ArbExecutionsRequest, opts ...grpc.CallOption) (SpecificQueryService_ArbExecutionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpecificQueryService_serviceDesc.Streams[1], "/penumbra.client.v1alpha1.SpecificQueryService/ArbExecutions", opts...)
	if err != nil {
		return nil, err
	}
	x := &specificQueryServiceArbExecutionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpecificQueryService_ArbExecutionsClient interface {
	Recv() (*ArbExecutionsResponse, error)
	grpc.ClientStream
}

type specificQueryServiceArbExecutionsClient struct {
	grpc.ClientStream
}

func (x *specificQueryServiceArbExecutionsClient) Recv() (*ArbExecutionsResponse, error) {
	m := new(ArbExecutionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *specificQueryServiceClient) LiquidityPositions(ctx context.Context, in *LiquidityPositionsRequest, opts ...grpc.CallOption) (SpecificQueryService_LiquidityPositionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpecificQueryService_serviceDesc.Streams[2], "/penumbra.client.v1alpha1.SpecificQueryService/LiquidityPositions", opts...)
	if err != nil {
		return nil, err
	}
	x := &specificQueryServiceLiquidityPositionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpecificQueryService_LiquidityPositionsClient interface {
	Recv() (*LiquidityPositionsResponse, error)
	grpc.ClientStream
}

type specificQueryServiceLiquidityPositionsClient struct {
	grpc.ClientStream
}

func (x *specificQueryServiceLiquidityPositionsClient) Recv() (*LiquidityPositionsResponse, error) {
	m := new(LiquidityPositionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *specificQueryServiceClient) LiquidityPositionById(ctx context.Context, in *LiquidityPositionByIdRequest, opts ...grpc.CallOption) (*LiquidityPositionByIdResponse, error) {
	out := new(LiquidityPositionByIdResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.SpecificQueryService/LiquidityPositionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificQueryServiceClient) LiquidityPositionsById(ctx context.Context, in *LiquidityPositionsByIdRequest, opts ...grpc.CallOption) (SpecificQueryService_LiquidityPositionsByIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpecificQueryService_serviceDesc.Streams[3], "/penumbra.client.v1alpha1.SpecificQueryService/LiquidityPositionsById", opts...)
	if err != nil {
		return nil, err
	}
	x := &specificQueryServiceLiquidityPositionsByIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpecificQueryService_LiquidityPositionsByIdClient interface {
	Recv() (*LiquidityPositionsByIdResponse, error)
	grpc.ClientStream
}

type specificQueryServiceLiquidityPositionsByIdClient struct {
	grpc.ClientStream
}

func (x *specificQueryServiceLiquidityPositionsByIdClient) Recv() (*LiquidityPositionsByIdResponse, error) {
	m := new(LiquidityPositionsByIdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *specificQueryServiceClient) LiquidityPositionsByPrice(ctx context.Context, in *LiquidityPositionsByPriceRequest, opts ...grpc.CallOption) (SpecificQueryService_LiquidityPositionsByPriceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpecificQueryService_serviceDesc.Streams[4], "/penumbra.client.v1alpha1.SpecificQueryService/LiquidityPositionsByPrice", opts...)
	if err != nil {
		return nil, err
	}
	x := &specificQueryServiceLiquidityPositionsByPriceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpecificQueryService_LiquidityPositionsByPriceClient interface {
	Recv() (*LiquidityPositionsByPriceResponse, error)
	grpc.ClientStream
}

type specificQueryServiceLiquidityPositionsByPriceClient struct {
	grpc.ClientStream
}

func (x *specificQueryServiceLiquidityPositionsByPriceClient) Recv() (*LiquidityPositionsByPriceResponse, error) {
	m := new(LiquidityPositionsByPriceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *specificQueryServiceClient) Spread(ctx context.Context, in *SpreadRequest, opts ...grpc.CallOption) (*SpreadResponse, error) {
	out := new(SpreadResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.SpecificQueryService/Spread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificQueryServiceClient) DenomMetadataById(ctx context.Context, in *DenomMetadataByIdRequest, opts ...grpc.CallOption) (*DenomMetadataByIdResponse, error) {
	out := new(DenomMetadataByIdResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.SpecificQueryService/DenomMetadataById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificQueryServiceClient) ProposalInfo(ctx context.Context, in *ProposalInfoRequest, opts ...grpc.CallOption) (*ProposalInfoResponse, error) {
	out := new(ProposalInfoResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.SpecificQueryService/ProposalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificQueryServiceClient) ProposalRateData(ctx context.Context, in *ProposalRateDataRequest, opts ...grpc.CallOption) (SpecificQueryService_ProposalRateDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpecificQueryService_serviceDesc.Streams[5], "/penumbra.client.v1alpha1.SpecificQueryService/ProposalRateData", opts...)
	if err != nil {
		return nil, err
	}
	x := &specificQueryServiceProposalRateDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpecificQueryService_ProposalRateDataClient interface {
	Recv() (*ProposalRateDataResponse, error)
	grpc.ClientStream
}

type specificQueryServiceProposalRateDataClient struct {
	grpc.ClientStream
}

func (x *specificQueryServiceProposalRateDataClient) Recv() (*ProposalRateDataResponse, error) {
	m := new(ProposalRateDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *specificQueryServiceClient) SimulateTrade(ctx context.Context, in *SimulateTradeRequest, opts ...grpc.CallOption) (*SimulateTradeResponse, error) {
	out := new(SimulateTradeResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.SpecificQueryService/SimulateTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificQueryServiceClient) KeyValue(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*KeyValueResponse, error) {
	out := new(KeyValueResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.SpecificQueryService/KeyValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificQueryServiceClient) PrefixValue(ctx context.Context, in *PrefixValueRequest, opts ...grpc.CallOption) (SpecificQueryService_PrefixValueClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpecificQueryService_serviceDesc.Streams[6], "/penumbra.client.v1alpha1.SpecificQueryService/PrefixValue", opts...)
	if err != nil {
		return nil, err
	}
	x := &specificQueryServicePrefixValueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpecificQueryService_PrefixValueClient interface {
	Recv() (*PrefixValueResponse, error)
	grpc.ClientStream
}

type specificQueryServicePrefixValueClient struct {
	grpc.ClientStream
}

func (x *specificQueryServicePrefixValueClient) Recv() (*PrefixValueResponse, error) {
	m := new(PrefixValueResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpecificQueryServiceServer is the server API for SpecificQueryService service.
type SpecificQueryServiceServer interface {
	TransactionByNote(context.Context, *TransactionByNoteRequest) (*TransactionByNoteResponse, error)
	ValidatorStatus(context.Context, *ValidatorStatusRequest) (*ValidatorStatusResponse, error)
	ValidatorPenalty(context.Context, *ValidatorPenaltyRequest) (*ValidatorPenaltyResponse, error)
	NextValidatorRate(context.Context, *NextValidatorRateRequest) (*NextValidatorRateResponse, error)
	CurrentValidatorRate(context.Context, *CurrentValidatorRateRequest) (*CurrentValidatorRateResponse, error)
	BatchSwapOutputData(context.Context, *BatchSwapOutputDataRequest) (*BatchSwapOutputDataResponse, error)
	SwapExecution(context.Context, *SwapExecutionRequest) (*SwapExecutionResponse, error)
	ArbExecution(context.Context, *ArbExecutionRequest) (*ArbExecutionResponse, error)
	// Returns a stream of `SwapExecutionsResponses`.
	SwapExecutions(*SwapExecutionsRequest, SpecificQueryService_SwapExecutionsServer) error
	// Returns a stream of `ArbExecutionsResponses`.
	ArbExecutions(*ArbExecutionsRequest, SpecificQueryService_ArbExecutionsServer) error
	// Returns a stream of `LiquidityPositionsResponse`s.
	LiquidityPositions(*LiquidityPositionsRequest, SpecificQueryService_LiquidityPositionsServer) error
	LiquidityPositionById(context.Context, *LiquidityPositionByIdRequest) (*LiquidityPositionByIdResponse, error)
	// Returns a stream of `LiquidityPositionsByIdResponse`s.
	LiquidityPositionsById(*LiquidityPositionsByIdRequest, SpecificQueryService_LiquidityPositionsByIdServer) error
	// Returns a stream of `LiquidityPositionsByPriceResponse`s.
	LiquidityPositionsByPrice(*LiquidityPositionsByPriceRequest, SpecificQueryService_LiquidityPositionsByPriceServer) error
	Spread(context.Context, *SpreadRequest) (*SpreadResponse, error)
	DenomMetadataById(context.Context, *DenomMetadataByIdRequest) (*DenomMetadataByIdResponse, error)
	ProposalInfo(context.Context, *ProposalInfoRequest) (*ProposalInfoResponse, error)
	ProposalRateData(*ProposalRateDataRequest, SpecificQueryService_ProposalRateDataServer) error
	// Simulate routing and trade execution.
	SimulateTrade(context.Context, *SimulateTradeRequest) (*SimulateTradeResponse, error)
	// General-purpose key-value state query API, that can be used to query
	// arbitrary keys in the JMT storage.
	KeyValue(context.Context, *KeyValueRequest) (*KeyValueResponse, error)
	// General-purpose prefixed key-value state query API, that can be used to query
	// arbitrary prefixes in the JMT storage.
	// Returns a stream of `PrefixValueResponse`s.
	PrefixValue(*PrefixValueRequest, SpecificQueryService_PrefixValueServer) error
}

// UnimplementedSpecificQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSpecificQueryServiceServer struct {
}

func (*UnimplementedSpecificQueryServiceServer) TransactionByNote(ctx context.Context, req *TransactionByNoteRequest) (*TransactionByNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionByNote not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) ValidatorStatus(ctx context.Context, req *ValidatorStatusRequest) (*ValidatorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorStatus not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) ValidatorPenalty(ctx context.Context, req *ValidatorPenaltyRequest) (*ValidatorPenaltyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorPenalty not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) NextValidatorRate(ctx context.Context, req *NextValidatorRateRequest) (*NextValidatorRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextValidatorRate not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) CurrentValidatorRate(ctx context.Context, req *CurrentValidatorRateRequest) (*CurrentValidatorRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentValidatorRate not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) BatchSwapOutputData(ctx context.Context, req *BatchSwapOutputDataRequest) (*BatchSwapOutputDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSwapOutputData not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) SwapExecution(ctx context.Context, req *SwapExecutionRequest) (*SwapExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapExecution not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) ArbExecution(ctx context.Context, req *ArbExecutionRequest) (*ArbExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArbExecution not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) SwapExecutions(req *SwapExecutionsRequest, srv SpecificQueryService_SwapExecutionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SwapExecutions not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) ArbExecutions(req *ArbExecutionsRequest, srv SpecificQueryService_ArbExecutionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ArbExecutions not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) LiquidityPositions(req *LiquidityPositionsRequest, srv SpecificQueryService_LiquidityPositionsServer) error {
	return status.Errorf(codes.Unimplemented, "method LiquidityPositions not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) LiquidityPositionById(ctx context.Context, req *LiquidityPositionByIdRequest) (*LiquidityPositionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityPositionById not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) LiquidityPositionsById(req *LiquidityPositionsByIdRequest, srv SpecificQueryService_LiquidityPositionsByIdServer) error {
	return status.Errorf(codes.Unimplemented, "method LiquidityPositionsById not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) LiquidityPositionsByPrice(req *LiquidityPositionsByPriceRequest, srv SpecificQueryService_LiquidityPositionsByPriceServer) error {
	return status.Errorf(codes.Unimplemented, "method LiquidityPositionsByPrice not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) Spread(ctx context.Context, req *SpreadRequest) (*SpreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spread not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) DenomMetadataById(ctx context.Context, req *DenomMetadataByIdRequest) (*DenomMetadataByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomMetadataById not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) ProposalInfo(ctx context.Context, req *ProposalInfoRequest) (*ProposalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalInfo not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) ProposalRateData(req *ProposalRateDataRequest, srv SpecificQueryService_ProposalRateDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ProposalRateData not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) SimulateTrade(ctx context.Context, req *SimulateTradeRequest) (*SimulateTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateTrade not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) KeyValue(ctx context.Context, req *KeyValueRequest) (*KeyValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyValue not implemented")
}
func (*UnimplementedSpecificQueryServiceServer) PrefixValue(req *PrefixValueRequest, srv SpecificQueryService_PrefixValueServer) error {
	return status.Errorf(codes.Unimplemented, "method PrefixValue not implemented")
}

func RegisterSpecificQueryServiceServer(s grpc1.Server, srv SpecificQueryServiceServer) {
	s.RegisterService(&_SpecificQueryService_serviceDesc, srv)
}

func _SpecificQueryService_TransactionByNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionByNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecificQueryServiceServer).TransactionByNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.SpecificQueryService/TransactionByNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecificQueryServiceServer).TransactionByNote(ctx, req.(*TransactionByNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecificQueryService_ValidatorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecificQueryServiceServer).ValidatorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.SpecificQueryService/ValidatorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecificQueryServiceServer).ValidatorStatus(ctx, req.(*ValidatorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecificQueryService_ValidatorPenalty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorPenaltyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecificQueryServiceServer).ValidatorPenalty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.SpecificQueryService/ValidatorPenalty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecificQueryServiceServer).ValidatorPenalty(ctx, req.(*ValidatorPenaltyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecificQueryService_NextValidatorRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextValidatorRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecificQueryServiceServer).NextValidatorRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.SpecificQueryService/NextValidatorRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecificQueryServiceServer).NextValidatorRate(ctx, req.(*NextValidatorRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecificQueryService_CurrentValidatorRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentValidatorRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecificQueryServiceServer).CurrentValidatorRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.SpecificQueryService/CurrentValidatorRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecificQueryServiceServer).CurrentValidatorRate(ctx, req.(*CurrentValidatorRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecificQueryService_BatchSwapOutputData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSwapOutputDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecificQueryServiceServer).BatchSwapOutputData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.SpecificQueryService/BatchSwapOutputData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecificQueryServiceServer).BatchSwapOutputData(ctx, req.(*BatchSwapOutputDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecificQueryService_SwapExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecificQueryServiceServer).SwapExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.SpecificQueryService/SwapExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecificQueryServiceServer).SwapExecution(ctx, req.(*SwapExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecificQueryService_ArbExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArbExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecificQueryServiceServer).ArbExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.SpecificQueryService/ArbExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecificQueryServiceServer).ArbExecution(ctx, req.(*ArbExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecificQueryService_SwapExecutions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SwapExecutionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpecificQueryServiceServer).SwapExecutions(m, &specificQueryServiceSwapExecutionsServer{stream})
}

type SpecificQueryService_SwapExecutionsServer interface {
	Send(*SwapExecutionsResponse) error
	grpc.ServerStream
}

type specificQueryServiceSwapExecutionsServer struct {
	grpc.ServerStream
}

func (x *specificQueryServiceSwapExecutionsServer) Send(m *SwapExecutionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SpecificQueryService_ArbExecutions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArbExecutionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpecificQueryServiceServer).ArbExecutions(m, &specificQueryServiceArbExecutionsServer{stream})
}

type SpecificQueryService_ArbExecutionsServer interface {
	Send(*ArbExecutionsResponse) error
	grpc.ServerStream
}

type specificQueryServiceArbExecutionsServer struct {
	grpc.ServerStream
}

func (x *specificQueryServiceArbExecutionsServer) Send(m *ArbExecutionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SpecificQueryService_LiquidityPositions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LiquidityPositionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpecificQueryServiceServer).LiquidityPositions(m, &specificQueryServiceLiquidityPositionsServer{stream})
}

type SpecificQueryService_LiquidityPositionsServer interface {
	Send(*LiquidityPositionsResponse) error
	grpc.ServerStream
}

type specificQueryServiceLiquidityPositionsServer struct {
	grpc.ServerStream
}

func (x *specificQueryServiceLiquidityPositionsServer) Send(m *LiquidityPositionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SpecificQueryService_LiquidityPositionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidityPositionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecificQueryServiceServer).LiquidityPositionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.SpecificQueryService/LiquidityPositionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecificQueryServiceServer).LiquidityPositionById(ctx, req.(*LiquidityPositionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecificQueryService_LiquidityPositionsById_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LiquidityPositionsByIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpecificQueryServiceServer).LiquidityPositionsById(m, &specificQueryServiceLiquidityPositionsByIdServer{stream})
}

type SpecificQueryService_LiquidityPositionsByIdServer interface {
	Send(*LiquidityPositionsByIdResponse) error
	grpc.ServerStream
}

type specificQueryServiceLiquidityPositionsByIdServer struct {
	grpc.ServerStream
}

func (x *specificQueryServiceLiquidityPositionsByIdServer) Send(m *LiquidityPositionsByIdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SpecificQueryService_LiquidityPositionsByPrice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LiquidityPositionsByPriceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpecificQueryServiceServer).LiquidityPositionsByPrice(m, &specificQueryServiceLiquidityPositionsByPriceServer{stream})
}

type SpecificQueryService_LiquidityPositionsByPriceServer interface {
	Send(*LiquidityPositionsByPriceResponse) error
	grpc.ServerStream
}

type specificQueryServiceLiquidityPositionsByPriceServer struct {
	grpc.ServerStream
}

func (x *specificQueryServiceLiquidityPositionsByPriceServer) Send(m *LiquidityPositionsByPriceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SpecificQueryService_Spread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecificQueryServiceServer).Spread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.SpecificQueryService/Spread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecificQueryServiceServer).Spread(ctx, req.(*SpreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecificQueryService_DenomMetadataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenomMetadataByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecificQueryServiceServer).DenomMetadataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.SpecificQueryService/DenomMetadataById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecificQueryServiceServer).DenomMetadataById(ctx, req.(*DenomMetadataByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecificQueryService_ProposalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecificQueryServiceServer).ProposalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.SpecificQueryService/ProposalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecificQueryServiceServer).ProposalInfo(ctx, req.(*ProposalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecificQueryService_ProposalRateData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProposalRateDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpecificQueryServiceServer).ProposalRateData(m, &specificQueryServiceProposalRateDataServer{stream})
}

type SpecificQueryService_ProposalRateDataServer interface {
	Send(*ProposalRateDataResponse) error
	grpc.ServerStream
}

type specificQueryServiceProposalRateDataServer struct {
	grpc.ServerStream
}

func (x *specificQueryServiceProposalRateDataServer) Send(m *ProposalRateDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SpecificQueryService_SimulateTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulateTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecificQueryServiceServer).SimulateTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.SpecificQueryService/SimulateTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecificQueryServiceServer).SimulateTrade(ctx, req.(*SimulateTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecificQueryService_KeyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecificQueryServiceServer).KeyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.SpecificQueryService/KeyValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecificQueryServiceServer).KeyValue(ctx, req.(*KeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecificQueryService_PrefixValue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrefixValueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpecificQueryServiceServer).PrefixValue(m, &specificQueryServicePrefixValueServer{stream})
}

type SpecificQueryService_PrefixValueServer interface {
	Send(*PrefixValueResponse) error
	grpc.ServerStream
}

type specificQueryServicePrefixValueServer struct {
	grpc.ServerStream
}

func (x *specificQueryServicePrefixValueServer) Send(m *PrefixValueResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SpecificQueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "penumbra.client.v1alpha1.SpecificQueryService",
	HandlerType: (*SpecificQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransactionByNote",
			Handler:    _SpecificQueryService_TransactionByNote_Handler,
		},
		{
			MethodName: "ValidatorStatus",
			Handler:    _SpecificQueryService_ValidatorStatus_Handler,
		},
		{
			MethodName: "ValidatorPenalty",
			Handler:    _SpecificQueryService_ValidatorPenalty_Handler,
		},
		{
			MethodName: "NextValidatorRate",
			Handler:    _SpecificQueryService_NextValidatorRate_Handler,
		},
		{
			MethodName: "CurrentValidatorRate",
			Handler:    _SpecificQueryService_CurrentValidatorRate_Handler,
		},
		{
			MethodName: "BatchSwapOutputData",
			Handler:    _SpecificQueryService_BatchSwapOutputData_Handler,
		},
		{
			MethodName: "SwapExecution",
			Handler:    _SpecificQueryService_SwapExecution_Handler,
		},
		{
			MethodName: "ArbExecution",
			Handler:    _SpecificQueryService_ArbExecution_Handler,
		},
		{
			MethodName: "LiquidityPositionById",
			Handler:    _SpecificQueryService_LiquidityPositionById_Handler,
		},
		{
			MethodName: "Spread",
			Handler:    _SpecificQueryService_Spread_Handler,
		},
		{
			MethodName: "DenomMetadataById",
			Handler:    _SpecificQueryService_DenomMetadataById_Handler,
		},
		{
			MethodName: "ProposalInfo",
			Handler:    _SpecificQueryService_ProposalInfo_Handler,
		},
		{
			MethodName: "SimulateTrade",
			Handler:    _SpecificQueryService_SimulateTrade_Handler,
		},
		{
			MethodName: "KeyValue",
			Handler:    _SpecificQueryService_KeyValue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SwapExecutions",
			Handler:       _SpecificQueryService_SwapExecutions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ArbExecutions",
			Handler:       _SpecificQueryService_ArbExecutions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LiquidityPositions",
			Handler:       _SpecificQueryService_LiquidityPositions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LiquidityPositionsById",
			Handler:       _SpecificQueryService_LiquidityPositionsById_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LiquidityPositionsByPrice",
			Handler:       _SpecificQueryService_LiquidityPositionsByPrice_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProposalRateData",
			Handler:       _SpecificQueryService_ProposalRateData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PrefixValue",
			Handler:       _SpecificQueryService_PrefixValue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "penumbra/client/v1alpha1/client.proto",
}

// TendermintProxyServiceClient is the client API for TendermintProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TendermintProxyServiceClient interface {
	// Status queries the current status.
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// Broadcast a transaction asynchronously.
	BroadcastTxAsync(ctx context.Context, in *BroadcastTxAsyncRequest, opts ...grpc.CallOption) (*BroadcastTxAsyncResponse, error)
	// Broadcast a transaction synchronously.
	BroadcastTxSync(ctx context.Context, in *BroadcastTxSyncRequest, opts ...grpc.CallOption) (*BroadcastTxSyncResponse, error)
	// Fetch a transaction by hash.
	GetTx(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*GetTxResponse, error)
	// ABCIQuery defines a query handler that supports ABCI queries directly to the
	// application, bypassing Tendermint completely. The ABCI query must contain
	// a valid and supported path, including app, custom, p2p, and store.
	ABCIQuery(ctx context.Context, in *ABCIQueryRequest, opts ...grpc.CallOption) (*ABCIQueryResponse, error)
	// GetBlockByHeight queries block for given height.
	GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*GetBlockByHeightResponse, error)
}

type tendermintProxyServiceClient struct {
	cc grpc1.ClientConn
}

func NewTendermintProxyServiceClient(cc grpc1.ClientConn) TendermintProxyServiceClient {
	return &tendermintProxyServiceClient{cc}
}

func (c *tendermintProxyServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.TendermintProxyService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tendermintProxyServiceClient) BroadcastTxAsync(ctx context.Context, in *BroadcastTxAsyncRequest, opts ...grpc.CallOption) (*BroadcastTxAsyncResponse, error) {
	out := new(BroadcastTxAsyncResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.TendermintProxyService/BroadcastTxAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tendermintProxyServiceClient) BroadcastTxSync(ctx context.Context, in *BroadcastTxSyncRequest, opts ...grpc.CallOption) (*BroadcastTxSyncResponse, error) {
	out := new(BroadcastTxSyncResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.TendermintProxyService/BroadcastTxSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tendermintProxyServiceClient) GetTx(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*GetTxResponse, error) {
	out := new(GetTxResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.TendermintProxyService/GetTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tendermintProxyServiceClient) ABCIQuery(ctx context.Context, in *ABCIQueryRequest, opts ...grpc.CallOption) (*ABCIQueryResponse, error) {
	out := new(ABCIQueryResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.TendermintProxyService/ABCIQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tendermintProxyServiceClient) GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*GetBlockByHeightResponse, error) {
	out := new(GetBlockByHeightResponse)
	err := c.cc.Invoke(ctx, "/penumbra.client.v1alpha1.TendermintProxyService/GetBlockByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TendermintProxyServiceServer is the server API for TendermintProxyService service.
type TendermintProxyServiceServer interface {
	// Status queries the current status.
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// Broadcast a transaction asynchronously.
	BroadcastTxAsync(context.Context, *BroadcastTxAsyncRequest) (*BroadcastTxAsyncResponse, error)
	// Broadcast a transaction synchronously.
	BroadcastTxSync(context.Context, *BroadcastTxSyncRequest) (*BroadcastTxSyncResponse, error)
	// Fetch a transaction by hash.
	GetTx(context.Context, *GetTxRequest) (*GetTxResponse, error)
	// ABCIQuery defines a query handler that supports ABCI queries directly to the
	// application, bypassing Tendermint completely. The ABCI query must contain
	// a valid and supported path, including app, custom, p2p, and store.
	ABCIQuery(context.Context, *ABCIQueryRequest) (*ABCIQueryResponse, error)
	// GetBlockByHeight queries block for given height.
	GetBlockByHeight(context.Context, *GetBlockByHeightRequest) (*GetBlockByHeightResponse, error)
}

// UnimplementedTendermintProxyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTendermintProxyServiceServer struct {
}

func (*UnimplementedTendermintProxyServiceServer) GetStatus(ctx context.Context, req *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedTendermintProxyServiceServer) BroadcastTxAsync(ctx context.Context, req *BroadcastTxAsyncRequest) (*BroadcastTxAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTxAsync not implemented")
}
func (*UnimplementedTendermintProxyServiceServer) BroadcastTxSync(ctx context.Context, req *BroadcastTxSyncRequest) (*BroadcastTxSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTxSync not implemented")
}
func (*UnimplementedTendermintProxyServiceServer) GetTx(ctx context.Context, req *GetTxRequest) (*GetTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTx not implemented")
}
func (*UnimplementedTendermintProxyServiceServer) ABCIQuery(ctx context.Context, req *ABCIQueryRequest) (*ABCIQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ABCIQuery not implemented")
}
func (*UnimplementedTendermintProxyServiceServer) GetBlockByHeight(ctx context.Context, req *GetBlockByHeightRequest) (*GetBlockByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHeight not implemented")
}

func RegisterTendermintProxyServiceServer(s grpc1.Server, srv TendermintProxyServiceServer) {
	s.RegisterService(&_TendermintProxyService_serviceDesc, srv)
}

func _TendermintProxyService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TendermintProxyServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.TendermintProxyService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TendermintProxyServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TendermintProxyService_BroadcastTxAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastTxAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TendermintProxyServiceServer).BroadcastTxAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.TendermintProxyService/BroadcastTxAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TendermintProxyServiceServer).BroadcastTxAsync(ctx, req.(*BroadcastTxAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TendermintProxyService_BroadcastTxSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastTxSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TendermintProxyServiceServer).BroadcastTxSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.TendermintProxyService/BroadcastTxSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TendermintProxyServiceServer).BroadcastTxSync(ctx, req.(*BroadcastTxSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TendermintProxyService_GetTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TendermintProxyServiceServer).GetTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.TendermintProxyService/GetTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TendermintProxyServiceServer).GetTx(ctx, req.(*GetTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TendermintProxyService_ABCIQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABCIQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TendermintProxyServiceServer).ABCIQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.TendermintProxyService/ABCIQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TendermintProxyServiceServer).ABCIQuery(ctx, req.(*ABCIQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TendermintProxyService_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TendermintProxyServiceServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.client.v1alpha1.TendermintProxyService/GetBlockByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TendermintProxyServiceServer).GetBlockByHeight(ctx, req.(*GetBlockByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TendermintProxyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "penumbra.client.v1alpha1.TendermintProxyService",
	HandlerType: (*TendermintProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _TendermintProxyService_GetStatus_Handler,
		},
		{
			MethodName: "BroadcastTxAsync",
			Handler:    _TendermintProxyService_BroadcastTxAsync_Handler,
		},
		{
			MethodName: "BroadcastTxSync",
			Handler:    _TendermintProxyService_BroadcastTxSync_Handler,
		},
		{
			MethodName: "GetTx",
			Handler:    _TendermintProxyService_GetTx_Handler,
		},
		{
			MethodName: "ABCIQuery",
			Handler:    _TendermintProxyService_ABCIQuery_Handler,
		},
		{
			MethodName: "GetBlockByHeight",
			Handler:    _TendermintProxyService_GetBlockByHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "penumbra/client/v1alpha1/client.proto",
}

func (m *InfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AbciVersion) > 0 {
		i -= len(m.AbciVersion)
		copy(dAtA[i:], m.AbciVersion)
		i = encodeVarintClient(dAtA, i, uint64(len(m.AbciVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.P2PVersion != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.P2PVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockVersion != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.BlockVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastBlockAppHash) > 0 {
		i -= len(m.LastBlockAppHash)
		copy(dAtA[i:], m.LastBlockAppHash)
		i = encodeVarintClient(dAtA, i, uint64(len(m.LastBlockAppHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LastBlockHeight != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.LastBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.AppVersion != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.AppVersion))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompactBlockRangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactBlockRangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactBlockRangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeepAlive {
		i--
		if m.KeepAlive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.EndHeight != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.StartHeight != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompactBlockRangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactBlockRangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactBlockRangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompactBlock != nil {
		{
			size, err := m.CompactBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainParametersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainParametersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainParametersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EpochByHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochByHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochByHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochByHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochByHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochByHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != nil {
		{
			size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainParametersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainParametersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainParametersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainParameters != nil {
		{
			size, err := m.ChainParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShowInactive {
		i--
		if m.ShowInactive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorInfo != nil {
		{
			size, err := m.ValidatorInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionByNoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionByNoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionByNoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NoteCommitment != nil {
		{
			size, err := m.NoteCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionByNoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionByNoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionByNoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NoteSource != nil {
		{
			size, err := m.NoteSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IdentityKey != nil {
		{
			size, err := m.IdentityKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorPenaltyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorPenaltyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorPenaltyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndEpochIndex != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.EndEpochIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.StartEpochIndex != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.StartEpochIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.IdentityKey != nil {
		{
			size, err := m.IdentityKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorPenaltyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorPenaltyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorPenaltyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Penalty != nil {
		{
			size, err := m.Penalty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CurrentValidatorRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentValidatorRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentValidatorRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IdentityKey != nil {
		{
			size, err := m.IdentityKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CurrentValidatorRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentValidatorRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentValidatorRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NextValidatorRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextValidatorRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextValidatorRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IdentityKey != nil {
		{
			size, err := m.IdentityKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NextValidatorRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextValidatorRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextValidatorRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchSwapOutputDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchSwapOutputDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchSwapOutputDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradingPair != nil {
		{
			size, err := m.TradingPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchSwapOutputDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchSwapOutputDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchSwapOutputDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapExecutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapExecutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapExecutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradingPair != nil {
		{
			size, err := m.TradingPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapExecutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwapExecution != nil {
		{
			size, err := m.SwapExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArbExecutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbExecutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbExecutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArbExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbExecutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.SwapExecution != nil {
		{
			size, err := m.SwapExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapExecutionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapExecutionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapExecutionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradingPair != nil {
		{
			size, err := m.TradingPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.EndHeight != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.StartHeight != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapExecutionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapExecutionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapExecutionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradingPair != nil {
		{
			size, err := m.TradingPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.SwapExecution != nil {
		{
			size, err := m.SwapExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArbExecutionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbExecutionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbExecutionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndHeight != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.StartHeight != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArbExecutionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArbExecutionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArbExecutionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.SwapExecution != nil {
		{
			size, err := m.SwapExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeClosed {
		i--
		if m.IncludeClosed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityPositionsByPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPositionsByPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPositionsByPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.TradingPair != nil {
		{
			size, err := m.TradingPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityPositionsByPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPositionsByPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPositionsByPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityPositionByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPositionByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPositionByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != nil {
		{
			size, err := m.PositionId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityPositionByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPositionByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPositionByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityPositionsByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPositionsByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPositionsByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PositionId) > 0 {
		for iNdEx := len(m.PositionId) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PositionId[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityPositionsByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPositionsByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPositionsByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpreadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpreadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradingPair != nil {
		{
			size, err := m.TradingPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpreadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpreadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpreadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApproxEffectivePrice_2To_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ApproxEffectivePrice_2To_1))))
		i--
		dAtA[i] = 0x21
	}
	if m.ApproxEffectivePrice_1To_2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ApproxEffectivePrice_1To_2))))
		i--
		dAtA[i] = 0x19
	}
	if m.Best_2To_1Position != nil {
		{
			size, err := m.Best_2To_1Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Best_1To_2Position != nil {
		{
			size, err := m.Best_1To_2Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomMetadataByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomMetadataByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomMetadataByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != nil {
		{
			size, err := m.AssetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomMetadataByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomMetadataByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomMetadataByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DenomMetadata != nil {
		{
			size, err := m.DenomMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartPosition != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.StartPosition))
		i--
		dAtA[i] = 0x10
	}
	if m.StartBlockHeight != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.StartBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposalRateDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalRateDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalRateDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalRateDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalRateDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalRateDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateData != nil {
		{
			size, err := m.RateData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimulateTradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulateTradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulateTradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Routing != nil {
		{
			size, err := m.Routing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimulateTradeRequest_Routing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulateTradeRequest_Routing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulateTradeRequest_Routing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Setting != nil {
		{
			size := m.Setting.Size()
			i -= size
			if _, err := m.Setting.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimulateTradeRequest_Routing_Default_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulateTradeRequest_Routing_Default_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Default != nil {
		{
			size, err := m.Default.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SimulateTradeRequest_Routing_SingleHop_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulateTradeRequest_Routing_SingleHop_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SingleHop != nil {
		{
			size, err := m.SingleHop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SimulateTradeRequest_Routing_SingleHop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulateTradeRequest_Routing_SingleHop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulateTradeRequest_Routing_SingleHop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SimulateTradeRequest_Routing_Default) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulateTradeRequest_Routing_Default) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulateTradeRequest_Routing_Default) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SimulateTradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimulateTradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimulateTradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof {
		i--
		if m.Proof {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyValueResponse_Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueResponse_Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValueResponse_Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrefixValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrefixValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrefixValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClient(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrefixValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrefixValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrefixValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Prove {
		i--
		if m.Prove {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TxResult != nil {
		{
			size, err := m.TxResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Index != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.GasUsed != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x18
	}
	if m.GasWanted != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.GasWanted))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Log) > 0 {
		i -= len(m.Log)
		copy(dAtA[i:], m.Log)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Log)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index {
		i--
		if m.Index {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastTxAsyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastTxAsyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastTxAsyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReqId != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.ReqId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Params) > 0 {
		i -= len(m.Params)
		copy(dAtA[i:], m.Params)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Params)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastTxAsyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastTxAsyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastTxAsyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Log) > 0 {
		i -= len(m.Log)
		copy(dAtA[i:], m.Log)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Log)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastTxSyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastTxSyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastTxSyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReqId != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.ReqId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Params) > 0 {
		i -= len(m.Params)
		copy(dAtA[i:], m.Params)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Params)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastTxSyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastTxSyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastTxSyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Log) > 0 {
		i -= len(m.Log)
		copy(dAtA[i:], m.Log)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Log)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorInfo != nil {
		{
			size, err := m.ValidatorInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SyncInfo != nil {
		{
			size, err := m.SyncInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NodeInfo != nil {
		{
			size, err := m.NodeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CatchingUp {
		i--
		if m.CatchingUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.LatestBlockTime != nil {
		{
			size, err := m.LatestBlockTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LatestBlockHeight != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.LatestBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LatestAppHash) > 0 {
		i -= len(m.LatestAppHash)
		copy(dAtA[i:], m.LatestAppHash)
		i = encodeVarintClient(dAtA, i, uint64(len(m.LatestAppHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LatestBlockHash) > 0 {
		i -= len(m.LatestBlockHash)
		copy(dAtA[i:], m.LatestBlockHash)
		i = encodeVarintClient(dAtA, i, uint64(len(m.LatestBlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ABCIQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ABCIQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ABCIQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Prove {
		i--
		if m.Prove {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Height != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ABCIQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ABCIQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ABCIQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Codespace) > 0 {
		i -= len(m.Codespace)
		copy(dAtA[i:], m.Codespace)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Codespace)))
		i--
		dAtA[i] = 0x52
	}
	if m.Height != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x48
	}
	if m.ProofOps != nil {
		{
			size, err := m.ProofOps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x32
	}
	if m.Index != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Info) > 0 {
		i -= len(m.Info)
		copy(dAtA[i:], m.Info)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Info)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Log) > 0 {
		i -= len(m.Log)
		copy(dAtA[i:], m.Log)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Log)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Code != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockByHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockByHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockByHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintClient(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockByHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockByHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockByHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BlockId != nil {
		{
			size, err := m.BlockId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClient(dAtA []byte, offset int, v uint64) int {
	offset -= sovClient(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.BlockVersion != 0 {
		n += 1 + sovClient(uint64(m.BlockVersion))
	}
	if m.P2PVersion != 0 {
		n += 1 + sovClient(uint64(m.P2PVersion))
	}
	l = len(m.AbciVersion)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *InfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.AppVersion != 0 {
		n += 1 + sovClient(uint64(m.AppVersion))
	}
	if m.LastBlockHeight != 0 {
		n += 1 + sovClient(uint64(m.LastBlockHeight))
	}
	l = len(m.LastBlockAppHash)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *CompactBlockRangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.StartHeight != 0 {
		n += 1 + sovClient(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovClient(uint64(m.EndHeight))
	}
	if m.KeepAlive {
		n += 2
	}
	return n
}

func (m *CompactBlockRangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompactBlock != nil {
		l = m.CompactBlock.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ChainParametersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *EpochByHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovClient(uint64(m.Height))
	}
	return n
}

func (m *EpochByHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ChainParametersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainParameters != nil {
		l = m.ChainParameters.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ValidatorInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.ShowInactive {
		n += 2
	}
	return n
}

func (m *ValidatorInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorInfo != nil {
		l = m.ValidatorInfo.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *TransactionByNoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.NoteCommitment != nil {
		l = m.NoteCommitment.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *TransactionByNoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteSource != nil {
		l = m.NoteSource.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ValidatorStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.IdentityKey != nil {
		l = m.IdentityKey.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ValidatorStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ValidatorPenaltyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.IdentityKey != nil {
		l = m.IdentityKey.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.StartEpochIndex != 0 {
		n += 1 + sovClient(uint64(m.StartEpochIndex))
	}
	if m.EndEpochIndex != 0 {
		n += 1 + sovClient(uint64(m.EndEpochIndex))
	}
	return n
}

func (m *ValidatorPenaltyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Penalty != nil {
		l = m.Penalty.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *CurrentValidatorRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.IdentityKey != nil {
		l = m.IdentityKey.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *CurrentValidatorRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *NextValidatorRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.IdentityKey != nil {
		l = m.IdentityKey.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *NextValidatorRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *BatchSwapOutputDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovClient(uint64(m.Height))
	}
	if m.TradingPair != nil {
		l = m.TradingPair.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *BatchSwapOutputDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *SwapExecutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovClient(uint64(m.Height))
	}
	if m.TradingPair != nil {
		l = m.TradingPair.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *SwapExecutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapExecution != nil {
		l = m.SwapExecution.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ArbExecutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovClient(uint64(m.Height))
	}
	return n
}

func (m *ArbExecutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapExecution != nil {
		l = m.SwapExecution.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovClient(uint64(m.Height))
	}
	return n
}

func (m *SwapExecutionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.StartHeight != 0 {
		n += 1 + sovClient(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovClient(uint64(m.EndHeight))
	}
	if m.TradingPair != nil {
		l = m.TradingPair.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *SwapExecutionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapExecution != nil {
		l = m.SwapExecution.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovClient(uint64(m.Height))
	}
	if m.TradingPair != nil {
		l = m.TradingPair.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ArbExecutionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.StartHeight != 0 {
		n += 1 + sovClient(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovClient(uint64(m.EndHeight))
	}
	return n
}

func (m *ArbExecutionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapExecution != nil {
		l = m.SwapExecution.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovClient(uint64(m.Height))
	}
	return n
}

func (m *LiquidityPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.IncludeClosed {
		n += 2
	}
	return n
}

func (m *LiquidityPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *LiquidityPositionsByPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.TradingPair != nil {
		l = m.TradingPair.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovClient(uint64(m.Limit))
	}
	return n
}

func (m *LiquidityPositionsByPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *LiquidityPositionByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.PositionId != nil {
		l = m.PositionId.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *LiquidityPositionByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *LiquidityPositionsByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if len(m.PositionId) > 0 {
		for _, e := range m.PositionId {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	return n
}

func (m *LiquidityPositionsByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *SpreadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.TradingPair != nil {
		l = m.TradingPair.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *SpreadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Best_1To_2Position != nil {
		l = m.Best_1To_2Position.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Best_2To_1Position != nil {
		l = m.Best_2To_1Position.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.ApproxEffectivePrice_1To_2 != 0 {
		n += 9
	}
	if m.ApproxEffectivePrice_2To_1 != 0 {
		n += 9
	}
	return n
}

func (m *DenomMetadataByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.AssetId != nil {
		l = m.AssetId.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *DenomMetadataByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenomMetadata != nil {
		l = m.DenomMetadata.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *ProposalInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.ProposalId != 0 {
		n += 1 + sovClient(uint64(m.ProposalId))
	}
	return n
}

func (m *ProposalInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartBlockHeight != 0 {
		n += 1 + sovClient(uint64(m.StartBlockHeight))
	}
	if m.StartPosition != 0 {
		n += 1 + sovClient(uint64(m.StartPosition))
	}
	return n
}

func (m *ProposalRateDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.ProposalId != 0 {
		n += 1 + sovClient(uint64(m.ProposalId))
	}
	return n
}

func (m *ProposalRateDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateData != nil {
		l = m.RateData.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *SimulateTradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Routing != nil {
		l = m.Routing.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *SimulateTradeRequest_Routing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Setting != nil {
		n += m.Setting.Size()
	}
	return n
}

func (m *SimulateTradeRequest_Routing_Default_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Default != nil {
		l = m.Default.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *SimulateTradeRequest_Routing_SingleHop_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SingleHop != nil {
		l = m.SingleHop.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *SimulateTradeRequest_Routing_SingleHop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SimulateTradeRequest_Routing_Default) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SimulateTradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *KeyValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Proof {
		n += 2
	}
	return n
}

func (m *KeyValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *KeyValueResponse_Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *PrefixValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *PrefixValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *GetTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Prove {
		n += 2
	}
	return n
}

func (m *GetTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovClient(uint64(m.Height))
	}
	if m.Index != 0 {
		n += 1 + sovClient(uint64(m.Index))
	}
	if m.TxResult != nil {
		l = m.TxResult.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *TxResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.GasWanted != 0 {
		n += 1 + sovClient(uint64(m.GasWanted))
	}
	if m.GasUsed != 0 {
		n += 1 + sovClient(uint64(m.GasUsed))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	return n
}

func (m *Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Index {
		n += 2
	}
	return n
}

func (m *BroadcastTxAsyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Params)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.ReqId != 0 {
		n += 1 + sovClient(uint64(m.ReqId))
	}
	return n
}

func (m *BroadcastTxAsyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovClient(uint64(m.Code))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *BroadcastTxSyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Params)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.ReqId != 0 {
		n += 1 + sovClient(uint64(m.ReqId))
	}
	return n
}

func (m *BroadcastTxSyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovClient(uint64(m.Code))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *GetStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.SyncInfo != nil {
		l = m.SyncInfo.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.ValidatorInfo != nil {
		l = m.ValidatorInfo.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *SyncInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LatestBlockHash)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.LatestAppHash)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.LatestBlockHeight != 0 {
		n += 1 + sovClient(uint64(m.LatestBlockHeight))
	}
	if m.LatestBlockTime != nil {
		l = m.LatestBlockTime.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.CatchingUp {
		n += 2
	}
	return n
}

func (m *ABCIQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovClient(uint64(m.Height))
	}
	if m.Prove {
		n += 2
	}
	return n
}

func (m *ABCIQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovClient(uint64(m.Code))
	}
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovClient(uint64(m.Index))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.ProofOps != nil {
		l = m.ProofOps.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovClient(uint64(m.Height))
	}
	l = len(m.Codespace)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *GetBlockByHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovClient(uint64(m.Height))
	}
	return n
}

func (m *GetBlockByHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockId != nil {
		l = m.BlockId.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func sovClient(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClient(x uint64) (n int) {
	return sovClient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockVersion", wireType)
			}
			m.BlockVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field P2PVersion", wireType)
			}
			m.P2PVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.P2PVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbciVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AbciVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			m.AppVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			m.LastBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockAppHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastBlockAppHash = append(m.LastBlockAppHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LastBlockAppHash == nil {
				m.LastBlockAppHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactBlockRangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactBlockRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactBlockRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepAlive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeepAlive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactBlockRangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactBlockRangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactBlockRangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompactBlock == nil {
				m.CompactBlock = &v1alpha1.CompactBlock{}
			}
			if err := m.CompactBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainParametersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainParametersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainParametersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochByHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochByHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochByHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochByHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochByHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochByHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Epoch == nil {
				m.Epoch = &v1alpha1.Epoch{}
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainParametersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainParametersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainParametersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainParameters == nil {
				m.ChainParameters = &v1alpha1.ChainParameters{}
			}
			if err := m.ChainParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowInactive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowInactive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorInfo == nil {
				m.ValidatorInfo = &v1alpha11.ValidatorInfo{}
			}
			if err := m.ValidatorInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionByNoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionByNoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionByNoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteCommitment == nil {
				m.NoteCommitment = &v1alpha12.StateCommitment{}
			}
			if err := m.NoteCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionByNoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionByNoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionByNoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteSource == nil {
				m.NoteSource = &v1alpha1.NoteSource{}
			}
			if err := m.NoteSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityKey == nil {
				m.IdentityKey = &v1alpha12.IdentityKey{}
			}
			if err := m.IdentityKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &v1alpha11.ValidatorStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorPenaltyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorPenaltyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorPenaltyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityKey == nil {
				m.IdentityKey = &v1alpha12.IdentityKey{}
			}
			if err := m.IdentityKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEpochIndex", wireType)
			}
			m.StartEpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndEpochIndex", wireType)
			}
			m.EndEpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndEpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorPenaltyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorPenaltyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorPenaltyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Penalty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Penalty == nil {
				m.Penalty = &v1alpha11.Penalty{}
			}
			if err := m.Penalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentValidatorRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentValidatorRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentValidatorRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityKey == nil {
				m.IdentityKey = &v1alpha12.IdentityKey{}
			}
			if err := m.IdentityKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentValidatorRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentValidatorRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentValidatorRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &v1alpha11.RateData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextValidatorRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextValidatorRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextValidatorRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityKey == nil {
				m.IdentityKey = &v1alpha12.IdentityKey{}
			}
			if err := m.IdentityKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextValidatorRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextValidatorRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextValidatorRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &v1alpha11.RateData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchSwapOutputDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchSwapOutputDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchSwapOutputDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingPair == nil {
				m.TradingPair = &v1alpha13.TradingPair{}
			}
			if err := m.TradingPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchSwapOutputDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchSwapOutputDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchSwapOutputDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &v1alpha13.BatchSwapOutputData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapExecutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapExecutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapExecutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingPair == nil {
				m.TradingPair = &v1alpha13.DirectedTradingPair{}
			}
			if err := m.TradingPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapExecution == nil {
				m.SwapExecution = &v1alpha13.SwapExecution{}
			}
			if err := m.SwapExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbExecutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbExecutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbExecutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapExecution == nil {
				m.SwapExecution = &v1alpha13.SwapExecution{}
			}
			if err := m.SwapExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapExecutionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapExecutionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapExecutionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingPair == nil {
				m.TradingPair = &v1alpha13.DirectedTradingPair{}
			}
			if err := m.TradingPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapExecutionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapExecutionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapExecutionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapExecution == nil {
				m.SwapExecution = &v1alpha13.SwapExecution{}
			}
			if err := m.SwapExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingPair == nil {
				m.TradingPair = &v1alpha13.DirectedTradingPair{}
			}
			if err := m.TradingPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbExecutionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbExecutionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbExecutionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArbExecutionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArbExecutionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArbExecutionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapExecution == nil {
				m.SwapExecution = &v1alpha13.SwapExecution{}
			}
			if err := m.SwapExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeClosed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeClosed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &v1alpha13.Position{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityPositionsByPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPositionsByPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPositionsByPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingPair == nil {
				m.TradingPair = &v1alpha13.DirectedTradingPair{}
			}
			if err := m.TradingPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityPositionsByPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPositionsByPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPositionsByPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &v1alpha13.Position{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityPositionByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPositionByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPositionByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionId == nil {
				m.PositionId = &v1alpha13.PositionId{}
			}
			if err := m.PositionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityPositionByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPositionByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPositionByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &v1alpha13.Position{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityPositionsByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPositionsByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPositionsByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = append(m.PositionId, &v1alpha13.PositionId{})
			if err := m.PositionId[len(m.PositionId)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityPositionsByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPositionsByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPositionsByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &v1alpha13.Position{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingPair == nil {
				m.TradingPair = &v1alpha13.TradingPair{}
			}
			if err := m.TradingPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpreadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Best_1To_2Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Best_1To_2Position == nil {
				m.Best_1To_2Position = &v1alpha13.Position{}
			}
			if err := m.Best_1To_2Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Best_2To_1Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Best_2To_1Position == nil {
				m.Best_2To_1Position = &v1alpha13.Position{}
			}
			if err := m.Best_2To_1Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproxEffectivePrice_1To_2", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ApproxEffectivePrice_1To_2 = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproxEffectivePrice_2To_1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ApproxEffectivePrice_2To_1 = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomMetadataByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomMetadataByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomMetadataByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetId == nil {
				m.AssetId = &v1alpha12.AssetId{}
			}
			if err := m.AssetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomMetadataByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomMetadataByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomMetadataByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenomMetadata == nil {
				m.DenomMetadata = &v1alpha12.DenomMetadata{}
			}
			if err := m.DenomMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlockHeight", wireType)
			}
			m.StartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPosition", wireType)
			}
			m.StartPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPosition |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalRateDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalRateDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalRateDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalRateDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalRateDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalRateDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateData == nil {
				m.RateData = &v1alpha11.RateData{}
			}
			if err := m.RateData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulateTradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulateTradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulateTradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &v1alpha12.Value{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &v1alpha12.AssetId{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Routing == nil {
				m.Routing = &SimulateTradeRequest_Routing{}
			}
			if err := m.Routing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulateTradeRequest_Routing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Routing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Routing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SimulateTradeRequest_Routing_Default{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Setting = &SimulateTradeRequest_Routing_Default_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleHop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SimulateTradeRequest_Routing_SingleHop{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Setting = &SimulateTradeRequest_Routing_SingleHop_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulateTradeRequest_Routing_SingleHop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleHop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleHop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulateTradeRequest_Routing_Default) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Default: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Default: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimulateTradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimulateTradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimulateTradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &v1alpha13.SwapExecution{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Proof = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &KeyValueResponse_Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &types.MerkleProof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValueResponse_Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrefixValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrefixValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrefixValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrefixValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrefixValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrefixValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prove", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prove = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxResult == nil {
				m.TxResult = &TxResult{}
			}
			if err := m.TxResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = append(m.Tx[:0], dAtA[iNdEx:postIndex]...)
			if m.Tx == nil {
				m.Tx = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasWanted", wireType)
			}
			m.GasWanted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasWanted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastTxAsyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastTxAsyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastTxAsyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params[:0], dAtA[iNdEx:postIndex]...)
			if m.Params == nil {
				m.Params = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			m.ReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastTxAsyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastTxAsyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastTxAsyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastTxSyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastTxSyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastTxSyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params[:0], dAtA[iNdEx:postIndex]...)
			if m.Params == nil {
				m.Params = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			m.ReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastTxSyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastTxSyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastTxSyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeInfo == nil {
				m.NodeInfo = &p2p.DefaultNodeInfo{}
			}
			if err := m.NodeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyncInfo == nil {
				m.SyncInfo = &SyncInfo{}
			}
			if err := m.SyncInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorInfo == nil {
				m.ValidatorInfo = &types1.Validator{}
			}
			if err := m.ValidatorInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestBlockHash = append(m.LatestBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestBlockHash == nil {
				m.LatestBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestAppHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestAppHash = append(m.LatestAppHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestAppHash == nil {
				m.LatestAppHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockHeight", wireType)
			}
			m.LatestBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestBlockTime == nil {
				m.LatestBlockTime = &types2.Timestamp{}
			}
			if err := m.LatestBlockTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatchingUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CatchingUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ABCIQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ABCIQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ABCIQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prove", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prove = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ABCIQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ABCIQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ABCIQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofOps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofOps == nil {
				m.ProofOps = &crypto.ProofOps{}
			}
			if err := m.ProofOps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockByHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockByHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockByHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockByHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockByHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockByHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockId == nil {
				m.BlockId = &types1.BlockID{}
			}
			if err := m.BlockId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &types1.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClient
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClient
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClient
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClient        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClient          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClient = fmt.Errorf("proto: unexpected end of group")
)
