// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/core/component/funding/v1/funding.proto

package fundingv1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	v1 "github.com/strangelove-ventures/interchaintest/v8/chain/penumbra/core/num/v1"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Funding component configuration data.
type FundingParameters struct {
}

func (m *FundingParameters) Reset()         { *m = FundingParameters{} }
func (m *FundingParameters) String() string { return proto.CompactTextString(m) }
func (*FundingParameters) ProtoMessage()    {}
func (*FundingParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_586f7399b4e8a469, []int{0}
}
func (m *FundingParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundingParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundingParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundingParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundingParameters.Merge(m, src)
}
func (m *FundingParameters) XXX_Size() int {
	return m.Size()
}
func (m *FundingParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_FundingParameters.DiscardUnknown(m)
}

var xxx_messageInfo_FundingParameters proto.InternalMessageInfo

// Genesis data for the funding component.
type GenesisContent struct {
	FundingParams *FundingParameters `protobuf:"bytes,1,opt,name=funding_params,json=fundingParams,proto3" json:"funding_params,omitempty"`
}

func (m *GenesisContent) Reset()         { *m = GenesisContent{} }
func (m *GenesisContent) String() string { return proto.CompactTextString(m) }
func (*GenesisContent) ProtoMessage()    {}
func (*GenesisContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_586f7399b4e8a469, []int{1}
}
func (m *GenesisContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisContent.Merge(m, src)
}
func (m *GenesisContent) XXX_Size() int {
	return m.Size()
}
func (m *GenesisContent) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisContent.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisContent proto.InternalMessageInfo

func (m *GenesisContent) GetFundingParams() *FundingParameters {
	if m != nil {
		return m.FundingParams
	}
	return nil
}

// Indicates that a funding stream reward was paid.
type EventFundingStreamReward struct {
	// The recipient of the funding stream reward.
	// This is a string value for future extensibility.
	// Currently it will be either "community-pool"
	// or an address.
	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// The epoch for which the reward was paid.
	EpochIndex uint64 `protobuf:"varint,2,opt,name=epoch_index,json=epochIndex,proto3" json:"epoch_index,omitempty"`
	// The amount of the reward, in staking tokens.
	RewardAmount *v1.Amount `protobuf:"bytes,3,opt,name=reward_amount,json=rewardAmount,proto3" json:"reward_amount,omitempty"`
}

func (m *EventFundingStreamReward) Reset()         { *m = EventFundingStreamReward{} }
func (m *EventFundingStreamReward) String() string { return proto.CompactTextString(m) }
func (*EventFundingStreamReward) ProtoMessage()    {}
func (*EventFundingStreamReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_586f7399b4e8a469, []int{2}
}
func (m *EventFundingStreamReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFundingStreamReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFundingStreamReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFundingStreamReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFundingStreamReward.Merge(m, src)
}
func (m *EventFundingStreamReward) XXX_Size() int {
	return m.Size()
}
func (m *EventFundingStreamReward) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFundingStreamReward.DiscardUnknown(m)
}

var xxx_messageInfo_EventFundingStreamReward proto.InternalMessageInfo

func (m *EventFundingStreamReward) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *EventFundingStreamReward) GetEpochIndex() uint64 {
	if m != nil {
		return m.EpochIndex
	}
	return 0
}

func (m *EventFundingStreamReward) GetRewardAmount() *v1.Amount {
	if m != nil {
		return m.RewardAmount
	}
	return nil
}

func init() {
	proto.RegisterType((*FundingParameters)(nil), "penumbra.core.component.funding.v1.FundingParameters")
	proto.RegisterType((*GenesisContent)(nil), "penumbra.core.component.funding.v1.GenesisContent")
	proto.RegisterType((*EventFundingStreamReward)(nil), "penumbra.core.component.funding.v1.EventFundingStreamReward")
}

func init() {
	proto.RegisterFile("penumbra/core/component/funding/v1/funding.proto", fileDescriptor_586f7399b4e8a469)
}

var fileDescriptor_586f7399b4e8a469 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x8a, 0xd4, 0x40,
	0x14, 0x85, 0x3b, 0x71, 0x10, 0xa6, 0xe6, 0x07, 0x8c, 0x9b, 0x46, 0x86, 0x38, 0x64, 0x31, 0xcc,
	0xc6, 0x2a, 0xa3, 0x08, 0x12, 0x57, 0xd3, 0xc1, 0x19, 0x5c, 0x08, 0x21, 0x42, 0x2f, 0x24, 0xd0,
	0x54, 0x27, 0x77, 0xba, 0x03, 0xd6, 0xad, 0x50, 0x55, 0x89, 0x3e, 0x86, 0x0f, 0xe0, 0xca, 0xa5,
	0x4f, 0x22, 0xae, 0x66, 0xe9, 0x52, 0xbb, 0x77, 0x3e, 0x85, 0x54, 0x7e, 0xba, 0xfd, 0x59, 0xf4,
	0x6c, 0x92, 0xaa, 0xcb, 0x77, 0x4e, 0x1d, 0x0e, 0x97, 0x3c, 0xae, 0x00, 0x6b, 0x31, 0x57, 0x9c,
	0xe5, 0x52, 0x01, 0xcb, 0xa5, 0xa8, 0x24, 0x02, 0x1a, 0x76, 0x5d, 0x63, 0x51, 0xe2, 0x82, 0x35,
	0xe1, 0x70, 0xa4, 0x95, 0x92, 0x46, 0x7a, 0xc1, 0xa0, 0xa0, 0x56, 0x41, 0x37, 0x0a, 0x3a, 0x60,
	0x4d, 0xf8, 0xc0, 0xff, 0xdb, 0x15, 0x6b, 0x61, 0x7d, 0xb0, 0x16, 0x9d, 0x47, 0x70, 0x9f, 0xdc,
	0xbb, 0xec, 0xe8, 0x84, 0x2b, 0x2e, 0xc0, 0x80, 0xd2, 0x01, 0x92, 0xe3, 0x2b, 0x40, 0xd0, 0xa5,
	0x8e, 0x25, 0x1a, 0x40, 0xe3, 0x65, 0xe4, 0xb8, 0x37, 0x9d, 0x55, 0x96, 0xd3, 0x63, 0xe7, 0xd4,
	0x39, 0x3f, 0x78, 0xf2, 0x8c, 0xee, 0xce, 0x40, 0xff, 0x7b, 0x20, 0x3d, 0xba, 0xfe, 0x63, 0xa4,
	0x83, 0x4f, 0x0e, 0x19, 0xbf, 0x6c, 0x00, 0x4d, 0x4f, 0xbe, 0x31, 0x0a, 0xb8, 0x48, 0xe1, 0x3d,
	0x57, 0x85, 0x77, 0x42, 0xf6, 0x15, 0xe4, 0x65, 0x55, 0x02, 0x9a, 0xf6, 0xd5, 0xfd, 0x74, 0x3b,
	0xf0, 0x1e, 0x92, 0x03, 0xa8, 0x64, 0xbe, 0x9c, 0x95, 0x58, 0xc0, 0x87, 0xb1, 0x7b, 0xea, 0x9c,
	0xef, 0xa5, 0xa4, 0x1d, 0xbd, 0xb2, 0x13, 0xef, 0x82, 0x1c, 0xa9, 0xd6, 0x68, 0xc6, 0x85, 0xac,
	0xd1, 0x8c, 0xef, 0xb4, 0xc1, 0x4f, 0xfe, 0x09, 0x6e, 0x1b, 0x69, 0x42, 0x7a, 0xd1, 0x32, 0xe9,
	0x61, 0x27, 0xe9, 0x6e, 0x93, 0x9f, 0xee, 0xd7, 0x95, 0xef, 0xdc, 0xac, 0x7c, 0xe7, 0xc7, 0xca,
	0x77, 0x3e, 0xae, 0xfd, 0xd1, 0xcd, 0xda, 0x1f, 0x7d, 0x5f, 0xfb, 0x23, 0x72, 0x96, 0x4b, 0x71,
	0x8b, 0x0a, 0x26, 0x87, 0x43, 0x07, 0xb6, 0xf4, 0xc4, 0x79, 0x5b, 0x2c, 0x4a, 0xb3, 0xac, 0xe7,
	0x16, 0x66, 0xda, 0x28, 0x8e, 0x0b, 0x78, 0x27, 0x1b, 0x78, 0x64, 0x4b, 0xa8, 0x15, 0x68, 0x56,
	0xa2, 0x01, 0x95, 0x2f, 0xb9, 0xfd, 0x6b, 0xc3, 0x9a, 0xe7, 0xac, 0xbd, 0xb0, 0xdd, 0x4b, 0xf2,
	0xa2, 0x3f, 0x36, 0xe1, 0x67, 0x77, 0x2f, 0x89, 0xe3, 0xcb, 0x2f, 0x6e, 0x90, 0x0c, 0x09, 0x63,
	0x9b, 0x30, 0xde, 0x24, 0xec, 0x53, 0xd1, 0x69, 0xf8, 0x6d, 0x0b, 0x65, 0x16, 0xca, 0x36, 0x50,
	0xd6, 0x43, 0xd9, 0x34, 0x5c, 0xb9, 0x74, 0x37, 0x94, 0x5d, 0x25, 0x93, 0xd7, 0x60, 0x78, 0xc1,
	0x0d, 0xff, 0xe5, 0x9e, 0x0d, 0x82, 0x28, 0xb2, 0x0a, 0xfb, 0xed, 0x25, 0x51, 0xd4, 0x6b, 0xa2,
	0x68, 0x1a, 0xce, 0xef, 0xb6, 0xeb, 0xf8, 0xf4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc1,
	0x57, 0xd3, 0x06, 0x03, 0x00, 0x00,
}

func (m *FundingParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundingParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundingParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GenesisContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FundingParams != nil {
		{
			size, err := m.FundingParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFunding(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventFundingStreamReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFundingStreamReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFundingStreamReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardAmount != nil {
		{
			size, err := m.RewardAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFunding(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EpochIndex != 0 {
		i = encodeVarintFunding(dAtA, i, uint64(m.EpochIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintFunding(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFunding(dAtA []byte, offset int, v uint64) int {
	offset -= sovFunding(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FundingParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GenesisContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FundingParams != nil {
		l = m.FundingParams.Size()
		n += 1 + l + sovFunding(uint64(l))
	}
	return n
}

func (m *EventFundingStreamReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovFunding(uint64(l))
	}
	if m.EpochIndex != 0 {
		n += 1 + sovFunding(uint64(m.EpochIndex))
	}
	if m.RewardAmount != nil {
		l = m.RewardAmount.Size()
		n += 1 + l + sovFunding(uint64(l))
	}
	return n
}

func sovFunding(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFunding(x uint64) (n int) {
	return sovFunding(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FundingParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFunding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundingParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundingParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFunding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFunding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFunding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFunding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFunding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FundingParams == nil {
				m.FundingParams = &FundingParameters{}
			}
			if err := m.FundingParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFunding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFunding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFundingStreamReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFunding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFundingStreamReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFundingStreamReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFunding
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFunding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIndex", wireType)
			}
			m.EpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFunding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFunding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardAmount == nil {
				m.RewardAmount = &v1.Amount{}
			}
			if err := m.RewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFunding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFunding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFunding(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFunding
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFunding
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFunding
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFunding
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFunding
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFunding
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFunding        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFunding          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFunding = fmt.Errorf("proto: unexpected end of group")
)
